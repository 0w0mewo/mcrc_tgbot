// Code generated by SQLBoiler 4.9.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sender is an object representing the database table.
type Sender struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username string `boil:"username" json:"username" toml:"username" yaml:"username"`

	R *senderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L senderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SenderColumns = struct {
	ID       string
	Username string
}{
	ID:       "id",
	Username: "username",
}

var SenderTableColumns = struct {
	ID       string
	Username string
}{
	ID:       "senders.id",
	Username: "senders.username",
}

// Generated where

var SenderWhere = struct {
	ID       whereHelperint64
	Username whereHelperstring
}{
	ID:       whereHelperint64{field: "\"senders\".\"id\""},
	Username: whereHelperstring{field: "\"senders\".\"username\""},
}

// SenderRels is where relationship names are stored.
var SenderRels = struct {
	Messages string
}{
	Messages: "Messages",
}

// senderR is where relationships are stored.
type senderR struct {
	Messages MessageSlice `boil:"Messages" json:"Messages" toml:"Messages" yaml:"Messages"`
}

// NewStruct creates a new relationship struct
func (*senderR) NewStruct() *senderR {
	return &senderR{}
}

// senderL is where Load methods for each relationship are stored.
type senderL struct{}

var (
	senderAllColumns            = []string{"id", "username"}
	senderColumnsWithoutDefault = []string{}
	senderColumnsWithDefault    = []string{"id", "username"}
	senderPrimaryKeyColumns     = []string{"id"}
	senderGeneratedColumns      = []string{"id", "username"}
)

type (
	// SenderSlice is an alias for a slice of pointers to Sender.
	// This should almost always be used instead of []Sender.
	SenderSlice []*Sender
	// SenderHook is the signature for custom Sender hook methods
	SenderHook func(context.Context, boil.ContextExecutor, *Sender) error

	senderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	senderType                 = reflect.TypeOf(&Sender{})
	senderMapping              = queries.MakeStructMapping(senderType)
	senderPrimaryKeyMapping, _ = queries.BindMapping(senderType, senderMapping, senderPrimaryKeyColumns)
	senderInsertCacheMut       sync.RWMutex
	senderInsertCache          = make(map[string]insertCache)
	senderUpdateCacheMut       sync.RWMutex
	senderUpdateCache          = make(map[string]updateCache)
	senderUpsertCacheMut       sync.RWMutex
	senderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var senderAfterSelectHooks []SenderHook

var senderBeforeInsertHooks []SenderHook
var senderAfterInsertHooks []SenderHook

var senderBeforeUpdateHooks []SenderHook
var senderAfterUpdateHooks []SenderHook

var senderBeforeDeleteHooks []SenderHook
var senderAfterDeleteHooks []SenderHook

var senderBeforeUpsertHooks []SenderHook
var senderAfterUpsertHooks []SenderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sender) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sender) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sender) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sender) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sender) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sender) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sender) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sender) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sender) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range senderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSenderHook registers your hook function for all future operations.
func AddSenderHook(hookPoint boil.HookPoint, senderHook SenderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		senderAfterSelectHooks = append(senderAfterSelectHooks, senderHook)
	case boil.BeforeInsertHook:
		senderBeforeInsertHooks = append(senderBeforeInsertHooks, senderHook)
	case boil.AfterInsertHook:
		senderAfterInsertHooks = append(senderAfterInsertHooks, senderHook)
	case boil.BeforeUpdateHook:
		senderBeforeUpdateHooks = append(senderBeforeUpdateHooks, senderHook)
	case boil.AfterUpdateHook:
		senderAfterUpdateHooks = append(senderAfterUpdateHooks, senderHook)
	case boil.BeforeDeleteHook:
		senderBeforeDeleteHooks = append(senderBeforeDeleteHooks, senderHook)
	case boil.AfterDeleteHook:
		senderAfterDeleteHooks = append(senderAfterDeleteHooks, senderHook)
	case boil.BeforeUpsertHook:
		senderBeforeUpsertHooks = append(senderBeforeUpsertHooks, senderHook)
	case boil.AfterUpsertHook:
		senderAfterUpsertHooks = append(senderAfterUpsertHooks, senderHook)
	}
}

// One returns a single sender record from the query.
func (q senderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sender, error) {
	o := &Sender{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for senders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sender records from the query.
func (q senderQuery) All(ctx context.Context, exec boil.ContextExecutor) (SenderSlice, error) {
	var o []*Sender

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sender slice")
	}

	if len(senderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sender records in the query.
func (q senderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count senders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q senderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if senders exists")
	}

	return count > 0, nil
}

// Messages retrieves all the message's Messages with an executor.
func (o *Sender) Messages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"messages\".\"sender_id\"=?", o.ID),
	)

	return Messages(queryMods...)
}

// LoadMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (senderL) LoadMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSender interface{}, mods queries.Applicator) error {
	var slice []*Sender
	var object *Sender

	if singular {
		object = maybeSender.(*Sender)
	} else {
		slice = *maybeSender.(*[]*Sender)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &senderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &senderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.sender_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load messages")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Messages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.Sender = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SenderID) {
				local.R.Messages = append(local.R.Messages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.Sender = local
				break
			}
		}
	}

	return nil
}

// AddMessages adds the given related objects to the existing relationships
// of the sender, optionally inserting them as new records.
// Appends related to o.R.Messages.
// Sets related.R.Sender appropriately.
func (o *Sender) AddMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SenderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"sender_id"}),
				strmangle.WhereClause("\"", "\"", 0, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SenderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &senderR{
			Messages: related,
		}
	} else {
		o.R.Messages = append(o.R.Messages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				Sender: o,
			}
		} else {
			rel.R.Sender = o
		}
	}
	return nil
}

// SetMessages removes all previously related items of the
// sender replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sender's Messages accordingly.
// Replaces o.R.Messages with related.
// Sets related.R.Sender's Messages accordingly.
func (o *Sender) SetMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	query := "update \"messages\" set \"sender_id\" = null where \"sender_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Messages {
			queries.SetScanner(&rel.SenderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sender = nil
		}
		o.R.Messages = nil
	}

	return o.AddMessages(ctx, exec, insert, related...)
}

// RemoveMessages relationships from objects passed in.
// Removes related items from R.Messages (uses pointer comparison, removal does not keep order)
// Sets related.R.Sender.
func (o *Sender) RemoveMessages(ctx context.Context, exec boil.ContextExecutor, related ...*Message) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SenderID, nil)
		if rel.R != nil {
			rel.R.Sender = nil
		}
		if err = rel.Update(ctx, exec, boil.Whitelist("sender_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Messages {
			if rel != ri {
				continue
			}

			ln := len(o.R.Messages)
			if ln > 1 && i < ln-1 {
				o.R.Messages[i] = o.R.Messages[ln-1]
			}
			o.R.Messages = o.R.Messages[:ln-1]
			break
		}
	}

	return nil
}

// Senders retrieves all the records using an executor.
func Senders(mods ...qm.QueryMod) senderQuery {
	mods = append(mods, qm.From("\"senders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"senders\".*"})
	}

	return senderQuery{NewQuery(mods...)}
}

// FindSender retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSender(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Sender, error) {
	senderObj := &Sender{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"senders\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, senderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from senders")
	}

	if err = senderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return senderObj, err
	}

	return senderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sender) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no senders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(senderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	senderInsertCacheMut.RLock()
	cache, cached := senderInsertCache[key]
	senderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			senderAllColumns,
			senderColumnsWithDefault,
			senderColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, senderGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(senderType, senderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(senderType, senderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"senders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"senders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into senders")
	}

	if !cached {
		senderInsertCacheMut.Lock()
		senderInsertCache[key] = cache
		senderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sender.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sender) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	senderUpdateCacheMut.RLock()
	cache, cached := senderUpdateCache[key]
	senderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			senderAllColumns,
			senderPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, senderGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update senders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"senders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, senderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(senderType, senderMapping, append(wl, senderPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update senders row")
	}

	if !cached {
		senderUpdateCacheMut.Lock()
		senderUpdateCache[key] = cache
		senderUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q senderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for senders")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SenderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"senders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, senderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in sender slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sender) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no senders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(senderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	senderUpsertCacheMut.RLock()
	cache, cached := senderUpsertCache[key]
	senderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			senderAllColumns,
			senderColumnsWithDefault,
			senderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			senderAllColumns,
			senderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert senders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(senderPrimaryKeyColumns))
			copy(conflict, senderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"senders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(senderType, senderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(senderType, senderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert senders")
	}

	if !cached {
		senderUpsertCacheMut.Lock()
		senderUpsertCache[key] = cache
		senderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sender record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sender) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no Sender provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), senderPrimaryKeyMapping)
	sql := "DELETE FROM \"senders\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from senders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q senderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no senderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from senders")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SenderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	if len(senderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"senders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, senderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sender slice")
	}

	if len(senderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sender) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSender(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SenderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SenderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), senderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"senders\".* FROM \"senders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, senderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SenderSlice")
	}

	*o = slice

	return nil
}

// SenderExists checks if the Sender row exists.
func SenderExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"senders\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if senders exists")
	}

	return exists, nil
}
