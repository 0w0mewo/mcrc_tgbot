// Code generated by SQLBoiler 4.9.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TweetUser is an object representing the database table.
type TweetUser struct {
	ID       string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username string `boil:"username" json:"username" toml:"username" yaml:"username"`

	R *tweetUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tweetUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TweetUserColumns = struct {
	ID       string
	Username string
}{
	ID:       "id",
	Username: "username",
}

var TweetUserTableColumns = struct {
	ID       string
	Username string
}{
	ID:       "tweet_users.id",
	Username: "tweet_users.username",
}

// Generated where

var TweetUserWhere = struct {
	ID       whereHelperstring
	Username whereHelperstring
}{
	ID:       whereHelperstring{field: "\"tweet_users\".\"id\""},
	Username: whereHelperstring{field: "\"tweet_users\".\"username\""},
}

// TweetUserRels is where relationship names are stored.
var TweetUserRels = struct {
	TweeterChatTweetSubscriptions string
}{
	TweeterChatTweetSubscriptions: "TweeterChatTweetSubscriptions",
}

// tweetUserR is where relationships are stored.
type tweetUserR struct {
	TweeterChatTweetSubscriptions ChatTweetSubscriptionSlice `boil:"TweeterChatTweetSubscriptions" json:"TweeterChatTweetSubscriptions" toml:"TweeterChatTweetSubscriptions" yaml:"TweeterChatTweetSubscriptions"`
}

// NewStruct creates a new relationship struct
func (*tweetUserR) NewStruct() *tweetUserR {
	return &tweetUserR{}
}

// tweetUserL is where Load methods for each relationship are stored.
type tweetUserL struct{}

var (
	tweetUserAllColumns            = []string{"id", "username"}
	tweetUserColumnsWithoutDefault = []string{"id", "username"}
	tweetUserColumnsWithDefault    = []string{}
	tweetUserPrimaryKeyColumns     = []string{"id"}
	tweetUserGeneratedColumns      = []string{}
)

type (
	// TweetUserSlice is an alias for a slice of pointers to TweetUser.
	// This should almost always be used instead of []TweetUser.
	TweetUserSlice []*TweetUser
	// TweetUserHook is the signature for custom TweetUser hook methods
	TweetUserHook func(context.Context, boil.ContextExecutor, *TweetUser) error

	tweetUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tweetUserType                 = reflect.TypeOf(&TweetUser{})
	tweetUserMapping              = queries.MakeStructMapping(tweetUserType)
	tweetUserPrimaryKeyMapping, _ = queries.BindMapping(tweetUserType, tweetUserMapping, tweetUserPrimaryKeyColumns)
	tweetUserInsertCacheMut       sync.RWMutex
	tweetUserInsertCache          = make(map[string]insertCache)
	tweetUserUpdateCacheMut       sync.RWMutex
	tweetUserUpdateCache          = make(map[string]updateCache)
	tweetUserUpsertCacheMut       sync.RWMutex
	tweetUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tweetUserAfterSelectHooks []TweetUserHook

var tweetUserBeforeInsertHooks []TweetUserHook
var tweetUserAfterInsertHooks []TweetUserHook

var tweetUserBeforeUpdateHooks []TweetUserHook
var tweetUserAfterUpdateHooks []TweetUserHook

var tweetUserBeforeDeleteHooks []TweetUserHook
var tweetUserAfterDeleteHooks []TweetUserHook

var tweetUserBeforeUpsertHooks []TweetUserHook
var tweetUserAfterUpsertHooks []TweetUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TweetUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TweetUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TweetUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TweetUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TweetUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TweetUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TweetUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TweetUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TweetUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tweetUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTweetUserHook registers your hook function for all future operations.
func AddTweetUserHook(hookPoint boil.HookPoint, tweetUserHook TweetUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tweetUserAfterSelectHooks = append(tweetUserAfterSelectHooks, tweetUserHook)
	case boil.BeforeInsertHook:
		tweetUserBeforeInsertHooks = append(tweetUserBeforeInsertHooks, tweetUserHook)
	case boil.AfterInsertHook:
		tweetUserAfterInsertHooks = append(tweetUserAfterInsertHooks, tweetUserHook)
	case boil.BeforeUpdateHook:
		tweetUserBeforeUpdateHooks = append(tweetUserBeforeUpdateHooks, tweetUserHook)
	case boil.AfterUpdateHook:
		tweetUserAfterUpdateHooks = append(tweetUserAfterUpdateHooks, tweetUserHook)
	case boil.BeforeDeleteHook:
		tweetUserBeforeDeleteHooks = append(tweetUserBeforeDeleteHooks, tweetUserHook)
	case boil.AfterDeleteHook:
		tweetUserAfterDeleteHooks = append(tweetUserAfterDeleteHooks, tweetUserHook)
	case boil.BeforeUpsertHook:
		tweetUserBeforeUpsertHooks = append(tweetUserBeforeUpsertHooks, tweetUserHook)
	case boil.AfterUpsertHook:
		tweetUserAfterUpsertHooks = append(tweetUserAfterUpsertHooks, tweetUserHook)
	}
}

// One returns a single tweetUser record from the query.
func (q tweetUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TweetUser, error) {
	o := &TweetUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tweet_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TweetUser records from the query.
func (q tweetUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (TweetUserSlice, error) {
	var o []*TweetUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TweetUser slice")
	}

	if len(tweetUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TweetUser records in the query.
func (q tweetUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tweet_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tweetUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tweet_users exists")
	}

	return count > 0, nil
}

// TweeterChatTweetSubscriptions retrieves all the chat_tweet_subscription's ChatTweetSubscriptions with an executor via tweeter_id column.
func (o *TweetUser) TweeterChatTweetSubscriptions(mods ...qm.QueryMod) chatTweetSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_tweet_subscriptions\".\"tweeter_id\"=?", o.ID),
	)

	return ChatTweetSubscriptions(queryMods...)
}

// LoadTweeterChatTweetSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tweetUserL) LoadTweeterChatTweetSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTweetUser interface{}, mods queries.Applicator) error {
	var slice []*TweetUser
	var object *TweetUser

	if singular {
		object = maybeTweetUser.(*TweetUser)
	} else {
		slice = *maybeTweetUser.(*[]*TweetUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tweetUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tweetUserR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chat_tweet_subscriptions`),
		qm.WhereIn(`chat_tweet_subscriptions.tweeter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_tweet_subscriptions")
	}

	var resultSlice []*ChatTweetSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_tweet_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_tweet_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_tweet_subscriptions")
	}

	if len(chatTweetSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TweeterChatTweetSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatTweetSubscriptionR{}
			}
			foreign.R.Tweeter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TweeterID) {
				local.R.TweeterChatTweetSubscriptions = append(local.R.TweeterChatTweetSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &chatTweetSubscriptionR{}
				}
				foreign.R.Tweeter = local
				break
			}
		}
	}

	return nil
}

// AddTweeterChatTweetSubscriptions adds the given related objects to the existing relationships
// of the tweet_user, optionally inserting them as new records.
// Appends related to o.R.TweeterChatTweetSubscriptions.
// Sets related.R.Tweeter appropriately.
func (o *TweetUser) AddTweeterChatTweetSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChatTweetSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TweeterID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_tweet_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"tweeter_id"}),
				strmangle.WhereClause("\"", "\"", 0, chatTweetSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TweeterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tweetUserR{
			TweeterChatTweetSubscriptions: related,
		}
	} else {
		o.R.TweeterChatTweetSubscriptions = append(o.R.TweeterChatTweetSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatTweetSubscriptionR{
				Tweeter: o,
			}
		} else {
			rel.R.Tweeter = o
		}
	}
	return nil
}

// SetTweeterChatTweetSubscriptions removes all previously related items of the
// tweet_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tweeter's TweeterChatTweetSubscriptions accordingly.
// Replaces o.R.TweeterChatTweetSubscriptions with related.
// Sets related.R.Tweeter's TweeterChatTweetSubscriptions accordingly.
func (o *TweetUser) SetTweeterChatTweetSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChatTweetSubscription) error {
	query := "update \"chat_tweet_subscriptions\" set \"tweeter_id\" = null where \"tweeter_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TweeterChatTweetSubscriptions {
			queries.SetScanner(&rel.TweeterID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Tweeter = nil
		}
		o.R.TweeterChatTweetSubscriptions = nil
	}

	return o.AddTweeterChatTweetSubscriptions(ctx, exec, insert, related...)
}

// RemoveTweeterChatTweetSubscriptions relationships from objects passed in.
// Removes related items from R.TweeterChatTweetSubscriptions (uses pointer comparison, removal does not keep order)
// Sets related.R.Tweeter.
func (o *TweetUser) RemoveTweeterChatTweetSubscriptions(ctx context.Context, exec boil.ContextExecutor, related ...*ChatTweetSubscription) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TweeterID, nil)
		if rel.R != nil {
			rel.R.Tweeter = nil
		}
		if err = rel.Update(ctx, exec, boil.Whitelist("tweeter_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TweeterChatTweetSubscriptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.TweeterChatTweetSubscriptions)
			if ln > 1 && i < ln-1 {
				o.R.TweeterChatTweetSubscriptions[i] = o.R.TweeterChatTweetSubscriptions[ln-1]
			}
			o.R.TweeterChatTweetSubscriptions = o.R.TweeterChatTweetSubscriptions[:ln-1]
			break
		}
	}

	return nil
}

// TweetUsers retrieves all the records using an executor.
func TweetUsers(mods ...qm.QueryMod) tweetUserQuery {
	mods = append(mods, qm.From("\"tweet_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tweet_users\".*"})
	}

	return tweetUserQuery{NewQuery(mods...)}
}

// FindTweetUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTweetUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TweetUser, error) {
	tweetUserObj := &TweetUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tweet_users\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tweetUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tweet_users")
	}

	if err = tweetUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tweetUserObj, err
	}

	return tweetUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TweetUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tweet_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tweetUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tweetUserInsertCacheMut.RLock()
	cache, cached := tweetUserInsertCache[key]
	tweetUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tweetUserAllColumns,
			tweetUserColumnsWithDefault,
			tweetUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tweetUserType, tweetUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tweetUserType, tweetUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tweet_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tweet_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tweet_users")
	}

	if !cached {
		tweetUserInsertCacheMut.Lock()
		tweetUserInsertCache[key] = cache
		tweetUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TweetUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TweetUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	tweetUserUpdateCacheMut.RLock()
	cache, cached := tweetUserUpdateCache[key]
	tweetUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tweetUserAllColumns,
			tweetUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update tweet_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tweet_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, tweetUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tweetUserType, tweetUserMapping, append(wl, tweetUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update tweet_users row")
	}

	if !cached {
		tweetUserUpdateCacheMut.Lock()
		tweetUserUpdateCache[key] = cache
		tweetUserUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tweetUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for tweet_users")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TweetUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tweet_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in tweetUser slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TweetUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tweet_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tweetUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tweetUserUpsertCacheMut.RLock()
	cache, cached := tweetUserUpsertCache[key]
	tweetUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tweetUserAllColumns,
			tweetUserColumnsWithDefault,
			tweetUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tweetUserAllColumns,
			tweetUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tweet_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tweetUserPrimaryKeyColumns))
			copy(conflict, tweetUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"tweet_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tweetUserType, tweetUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tweetUserType, tweetUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tweet_users")
	}

	if !cached {
		tweetUserUpsertCacheMut.Lock()
		tweetUserUpsertCache[key] = cache
		tweetUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TweetUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TweetUser) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no TweetUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tweetUserPrimaryKeyMapping)
	sql := "DELETE FROM \"tweet_users\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from tweet_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q tweetUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no tweetUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tweet_users")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TweetUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	if len(tweetUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tweet_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tweetUser slice")
	}

	if len(tweetUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TweetUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTweetUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TweetUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TweetUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tweetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tweet_users\".* FROM \"tweet_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tweetUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TweetUserSlice")
	}

	*o = slice

	return nil
}

// TweetUserExists checks if the TweetUser row exists.
func TweetUserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tweet_users\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tweet_users exists")
	}

	return exists, nil
}
