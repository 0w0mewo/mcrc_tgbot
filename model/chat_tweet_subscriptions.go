// Code generated by SQLBoiler 4.9.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChatTweetSubscription is an object representing the database table.
type ChatTweetSubscription struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LastTweet string      `boil:"last_tweet" json:"last_tweet" toml:"last_tweet" yaml:"last_tweet"`
	TweeterID null.String `boil:"tweeter_id" json:"tweeter_id,omitempty" toml:"tweeter_id" yaml:"tweeter_id,omitempty"`
	ChatID    null.Int64  `boil:"chat_id" json:"chat_id,omitempty" toml:"chat_id" yaml:"chat_id,omitempty"`

	R *chatTweetSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatTweetSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatTweetSubscriptionColumns = struct {
	ID        string
	LastTweet string
	TweeterID string
	ChatID    string
}{
	ID:        "id",
	LastTweet: "last_tweet",
	TweeterID: "tweeter_id",
	ChatID:    "chat_id",
}

var ChatTweetSubscriptionTableColumns = struct {
	ID        string
	LastTweet string
	TweeterID string
	ChatID    string
}{
	ID:        "chat_tweet_subscriptions.id",
	LastTweet: "chat_tweet_subscriptions.last_tweet",
	TweeterID: "chat_tweet_subscriptions.tweeter_id",
	ChatID:    "chat_tweet_subscriptions.chat_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChatTweetSubscriptionWhere = struct {
	ID        whereHelperint64
	LastTweet whereHelperstring
	TweeterID whereHelpernull_String
	ChatID    whereHelpernull_Int64
}{
	ID:        whereHelperint64{field: "\"chat_tweet_subscriptions\".\"id\""},
	LastTweet: whereHelperstring{field: "\"chat_tweet_subscriptions\".\"last_tweet\""},
	TweeterID: whereHelpernull_String{field: "\"chat_tweet_subscriptions\".\"tweeter_id\""},
	ChatID:    whereHelpernull_Int64{field: "\"chat_tweet_subscriptions\".\"chat_id\""},
}

// ChatTweetSubscriptionRels is where relationship names are stored.
var ChatTweetSubscriptionRels = struct {
	Chat    string
	Tweeter string
}{
	Chat:    "Chat",
	Tweeter: "Tweeter",
}

// chatTweetSubscriptionR is where relationships are stored.
type chatTweetSubscriptionR struct {
	Chat    *Chat      `boil:"Chat" json:"Chat" toml:"Chat" yaml:"Chat"`
	Tweeter *TweetUser `boil:"Tweeter" json:"Tweeter" toml:"Tweeter" yaml:"Tweeter"`
}

// NewStruct creates a new relationship struct
func (*chatTweetSubscriptionR) NewStruct() *chatTweetSubscriptionR {
	return &chatTweetSubscriptionR{}
}

// chatTweetSubscriptionL is where Load methods for each relationship are stored.
type chatTweetSubscriptionL struct{}

var (
	chatTweetSubscriptionAllColumns            = []string{"id", "last_tweet", "tweeter_id", "chat_id"}
	chatTweetSubscriptionColumnsWithoutDefault = []string{}
	chatTweetSubscriptionColumnsWithDefault    = []string{"id", "last_tweet", "tweeter_id", "chat_id"}
	chatTweetSubscriptionPrimaryKeyColumns     = []string{"id"}
	chatTweetSubscriptionGeneratedColumns      = []string{"id", "last_tweet", "tweeter_id", "chat_id"}
)

type (
	// ChatTweetSubscriptionSlice is an alias for a slice of pointers to ChatTweetSubscription.
	// This should almost always be used instead of []ChatTweetSubscription.
	ChatTweetSubscriptionSlice []*ChatTweetSubscription
	// ChatTweetSubscriptionHook is the signature for custom ChatTweetSubscription hook methods
	ChatTweetSubscriptionHook func(context.Context, boil.ContextExecutor, *ChatTweetSubscription) error

	chatTweetSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatTweetSubscriptionType                 = reflect.TypeOf(&ChatTweetSubscription{})
	chatTweetSubscriptionMapping              = queries.MakeStructMapping(chatTweetSubscriptionType)
	chatTweetSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, chatTweetSubscriptionPrimaryKeyColumns)
	chatTweetSubscriptionInsertCacheMut       sync.RWMutex
	chatTweetSubscriptionInsertCache          = make(map[string]insertCache)
	chatTweetSubscriptionUpdateCacheMut       sync.RWMutex
	chatTweetSubscriptionUpdateCache          = make(map[string]updateCache)
	chatTweetSubscriptionUpsertCacheMut       sync.RWMutex
	chatTweetSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chatTweetSubscriptionAfterSelectHooks []ChatTweetSubscriptionHook

var chatTweetSubscriptionBeforeInsertHooks []ChatTweetSubscriptionHook
var chatTweetSubscriptionAfterInsertHooks []ChatTweetSubscriptionHook

var chatTweetSubscriptionBeforeUpdateHooks []ChatTweetSubscriptionHook
var chatTweetSubscriptionAfterUpdateHooks []ChatTweetSubscriptionHook

var chatTweetSubscriptionBeforeDeleteHooks []ChatTweetSubscriptionHook
var chatTweetSubscriptionAfterDeleteHooks []ChatTweetSubscriptionHook

var chatTweetSubscriptionBeforeUpsertHooks []ChatTweetSubscriptionHook
var chatTweetSubscriptionAfterUpsertHooks []ChatTweetSubscriptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChatTweetSubscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChatTweetSubscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChatTweetSubscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChatTweetSubscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChatTweetSubscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChatTweetSubscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChatTweetSubscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChatTweetSubscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChatTweetSubscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatTweetSubscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChatTweetSubscriptionHook registers your hook function for all future operations.
func AddChatTweetSubscriptionHook(hookPoint boil.HookPoint, chatTweetSubscriptionHook ChatTweetSubscriptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chatTweetSubscriptionAfterSelectHooks = append(chatTweetSubscriptionAfterSelectHooks, chatTweetSubscriptionHook)
	case boil.BeforeInsertHook:
		chatTweetSubscriptionBeforeInsertHooks = append(chatTweetSubscriptionBeforeInsertHooks, chatTweetSubscriptionHook)
	case boil.AfterInsertHook:
		chatTweetSubscriptionAfterInsertHooks = append(chatTweetSubscriptionAfterInsertHooks, chatTweetSubscriptionHook)
	case boil.BeforeUpdateHook:
		chatTweetSubscriptionBeforeUpdateHooks = append(chatTweetSubscriptionBeforeUpdateHooks, chatTweetSubscriptionHook)
	case boil.AfterUpdateHook:
		chatTweetSubscriptionAfterUpdateHooks = append(chatTweetSubscriptionAfterUpdateHooks, chatTweetSubscriptionHook)
	case boil.BeforeDeleteHook:
		chatTweetSubscriptionBeforeDeleteHooks = append(chatTweetSubscriptionBeforeDeleteHooks, chatTweetSubscriptionHook)
	case boil.AfterDeleteHook:
		chatTweetSubscriptionAfterDeleteHooks = append(chatTweetSubscriptionAfterDeleteHooks, chatTweetSubscriptionHook)
	case boil.BeforeUpsertHook:
		chatTweetSubscriptionBeforeUpsertHooks = append(chatTweetSubscriptionBeforeUpsertHooks, chatTweetSubscriptionHook)
	case boil.AfterUpsertHook:
		chatTweetSubscriptionAfterUpsertHooks = append(chatTweetSubscriptionAfterUpsertHooks, chatTweetSubscriptionHook)
	}
}

// One returns a single chatTweetSubscription record from the query.
func (q chatTweetSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChatTweetSubscription, error) {
	o := &ChatTweetSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chat_tweet_subscriptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChatTweetSubscription records from the query.
func (q chatTweetSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatTweetSubscriptionSlice, error) {
	var o []*ChatTweetSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChatTweetSubscription slice")
	}

	if len(chatTweetSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChatTweetSubscription records in the query.
func (q chatTweetSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chat_tweet_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatTweetSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chat_tweet_subscriptions exists")
	}

	return count > 0, nil
}

// Chat pointed to by the foreign key.
func (o *ChatTweetSubscription) Chat(mods ...qm.QueryMod) chatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChatID),
	}

	queryMods = append(queryMods, mods...)

	return Chats(queryMods...)
}

// Tweeter pointed to by the foreign key.
func (o *ChatTweetSubscription) Tweeter(mods ...qm.QueryMod) tweetUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TweeterID),
	}

	queryMods = append(queryMods, mods...)

	return TweetUsers(queryMods...)
}

// LoadChat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatTweetSubscriptionL) LoadChat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatTweetSubscription interface{}, mods queries.Applicator) error {
	var slice []*ChatTweetSubscription
	var object *ChatTweetSubscription

	if singular {
		object = maybeChatTweetSubscription.(*ChatTweetSubscription)
	} else {
		slice = *maybeChatTweetSubscription.(*[]*ChatTweetSubscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatTweetSubscriptionR{}
		}
		if !queries.IsNil(object.ChatID) {
			args = append(args, object.ChatID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatTweetSubscriptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChatID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChatID) {
				args = append(args, obj.ChatID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chats`),
		qm.WhereIn(`chats.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chat")
	}

	var resultSlice []*Chat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chats")
	}

	if len(chatTweetSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chat = foreign
		if foreign.R == nil {
			foreign.R = &chatR{}
		}
		foreign.R.ChatTweetSubscriptions = append(foreign.R.ChatTweetSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChatID, foreign.ID) {
				local.R.Chat = foreign
				if foreign.R == nil {
					foreign.R = &chatR{}
				}
				foreign.R.ChatTweetSubscriptions = append(foreign.R.ChatTweetSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadTweeter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatTweetSubscriptionL) LoadTweeter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatTweetSubscription interface{}, mods queries.Applicator) error {
	var slice []*ChatTweetSubscription
	var object *ChatTweetSubscription

	if singular {
		object = maybeChatTweetSubscription.(*ChatTweetSubscription)
	} else {
		slice = *maybeChatTweetSubscription.(*[]*ChatTweetSubscription)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatTweetSubscriptionR{}
		}
		if !queries.IsNil(object.TweeterID) {
			args = append(args, object.TweeterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatTweetSubscriptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TweeterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TweeterID) {
				args = append(args, obj.TweeterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tweet_users`),
		qm.WhereIn(`tweet_users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TweetUser")
	}

	var resultSlice []*TweetUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TweetUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tweet_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tweet_users")
	}

	if len(chatTweetSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tweeter = foreign
		if foreign.R == nil {
			foreign.R = &tweetUserR{}
		}
		foreign.R.TweeterChatTweetSubscriptions = append(foreign.R.TweeterChatTweetSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TweeterID, foreign.ID) {
				local.R.Tweeter = foreign
				if foreign.R == nil {
					foreign.R = &tweetUserR{}
				}
				foreign.R.TweeterChatTweetSubscriptions = append(foreign.R.TweeterChatTweetSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// SetChat of the chatTweetSubscription to the related item.
// Sets o.R.Chat to related.
// Adds o to related.R.ChatTweetSubscriptions.
func (o *ChatTweetSubscription) SetChat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chat) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_tweet_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"chat_id"}),
		strmangle.WhereClause("\"", "\"", 0, chatTweetSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChatID, related.ID)
	if o.R == nil {
		o.R = &chatTweetSubscriptionR{
			Chat: related,
		}
	} else {
		o.R.Chat = related
	}

	if related.R == nil {
		related.R = &chatR{
			ChatTweetSubscriptions: ChatTweetSubscriptionSlice{o},
		}
	} else {
		related.R.ChatTweetSubscriptions = append(related.R.ChatTweetSubscriptions, o)
	}

	return nil
}

// RemoveChat relationship.
// Sets o.R.Chat to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChatTweetSubscription) RemoveChat(ctx context.Context, exec boil.ContextExecutor, related *Chat) error {
	var err error

	queries.SetScanner(&o.ChatID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("chat_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Chat = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChatTweetSubscriptions {
		if queries.Equal(o.ChatID, ri.ChatID) {
			continue
		}

		ln := len(related.R.ChatTweetSubscriptions)
		if ln > 1 && i < ln-1 {
			related.R.ChatTweetSubscriptions[i] = related.R.ChatTweetSubscriptions[ln-1]
		}
		related.R.ChatTweetSubscriptions = related.R.ChatTweetSubscriptions[:ln-1]
		break
	}
	return nil
}

// SetTweeter of the chatTweetSubscription to the related item.
// Sets o.R.Tweeter to related.
// Adds o to related.R.TweeterChatTweetSubscriptions.
func (o *ChatTweetSubscription) SetTweeter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TweetUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_tweet_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tweeter_id"}),
		strmangle.WhereClause("\"", "\"", 0, chatTweetSubscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TweeterID, related.ID)
	if o.R == nil {
		o.R = &chatTweetSubscriptionR{
			Tweeter: related,
		}
	} else {
		o.R.Tweeter = related
	}

	if related.R == nil {
		related.R = &tweetUserR{
			TweeterChatTweetSubscriptions: ChatTweetSubscriptionSlice{o},
		}
	} else {
		related.R.TweeterChatTweetSubscriptions = append(related.R.TweeterChatTweetSubscriptions, o)
	}

	return nil
}

// RemoveTweeter relationship.
// Sets o.R.Tweeter to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChatTweetSubscription) RemoveTweeter(ctx context.Context, exec boil.ContextExecutor, related *TweetUser) error {
	var err error

	queries.SetScanner(&o.TweeterID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("tweeter_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Tweeter = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TweeterChatTweetSubscriptions {
		if queries.Equal(o.TweeterID, ri.TweeterID) {
			continue
		}

		ln := len(related.R.TweeterChatTweetSubscriptions)
		if ln > 1 && i < ln-1 {
			related.R.TweeterChatTweetSubscriptions[i] = related.R.TweeterChatTweetSubscriptions[ln-1]
		}
		related.R.TweeterChatTweetSubscriptions = related.R.TweeterChatTweetSubscriptions[:ln-1]
		break
	}
	return nil
}

// ChatTweetSubscriptions retrieves all the records using an executor.
func ChatTweetSubscriptions(mods ...qm.QueryMod) chatTweetSubscriptionQuery {
	mods = append(mods, qm.From("\"chat_tweet_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_tweet_subscriptions\".*"})
	}

	return chatTweetSubscriptionQuery{NewQuery(mods...)}
}

// FindChatTweetSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatTweetSubscription(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ChatTweetSubscription, error) {
	chatTweetSubscriptionObj := &ChatTweetSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_tweet_subscriptions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chatTweetSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chat_tweet_subscriptions")
	}

	if err = chatTweetSubscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chatTweetSubscriptionObj, err
	}

	return chatTweetSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatTweetSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_tweet_subscriptions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatTweetSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatTweetSubscriptionInsertCacheMut.RLock()
	cache, cached := chatTweetSubscriptionInsertCache[key]
	chatTweetSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatTweetSubscriptionAllColumns,
			chatTweetSubscriptionColumnsWithDefault,
			chatTweetSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, chatTweetSubscriptionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_tweet_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_tweet_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chat_tweet_subscriptions")
	}

	if !cached {
		chatTweetSubscriptionInsertCacheMut.Lock()
		chatTweetSubscriptionInsertCache[key] = cache
		chatTweetSubscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChatTweetSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatTweetSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	chatTweetSubscriptionUpdateCacheMut.RLock()
	cache, cached := chatTweetSubscriptionUpdateCache[key]
	chatTweetSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatTweetSubscriptionAllColumns,
			chatTweetSubscriptionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, chatTweetSubscriptionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update chat_tweet_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_tweet_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, chatTweetSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, append(wl, chatTweetSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update chat_tweet_subscriptions row")
	}

	if !cached {
		chatTweetSubscriptionUpdateCacheMut.Lock()
		chatTweetSubscriptionUpdateCache[key] = cache
		chatTweetSubscriptionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chatTweetSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for chat_tweet_subscriptions")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatTweetSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatTweetSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_tweet_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatTweetSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in chatTweetSubscription slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatTweetSubscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_tweet_subscriptions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatTweetSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatTweetSubscriptionUpsertCacheMut.RLock()
	cache, cached := chatTweetSubscriptionUpsertCache[key]
	chatTweetSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chatTweetSubscriptionAllColumns,
			chatTweetSubscriptionColumnsWithDefault,
			chatTweetSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chatTweetSubscriptionAllColumns,
			chatTweetSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chat_tweet_subscriptions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chatTweetSubscriptionPrimaryKeyColumns))
			copy(conflict, chatTweetSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"chat_tweet_subscriptions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatTweetSubscriptionType, chatTweetSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chat_tweet_subscriptions")
	}

	if !cached {
		chatTweetSubscriptionUpsertCacheMut.Lock()
		chatTweetSubscriptionUpsertCache[key] = cache
		chatTweetSubscriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChatTweetSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatTweetSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no ChatTweetSubscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatTweetSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"chat_tweet_subscriptions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from chat_tweet_subscriptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q chatTweetSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no chatTweetSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from chat_tweet_subscriptions")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatTweetSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	if len(chatTweetSubscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatTweetSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_tweet_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatTweetSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from chatTweetSubscription slice")
	}

	if len(chatTweetSubscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatTweetSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChatTweetSubscription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatTweetSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatTweetSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatTweetSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_tweet_subscriptions\".* FROM \"chat_tweet_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatTweetSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChatTweetSubscriptionSlice")
	}

	*o = slice

	return nil
}

// ChatTweetSubscriptionExists checks if the ChatTweetSubscription row exists.
func ChatTweetSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_tweet_subscriptions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chat_tweet_subscriptions exists")
	}

	return exists, nil
}
