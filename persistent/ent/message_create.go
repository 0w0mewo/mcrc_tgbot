// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/message"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/sender"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMsg sets the "msg" field.
func (mc *MessageCreate) SetMsg(b []byte) *MessageCreate {
	mc.mutation.SetMsg(b)
	return mc
}

// SetType sets the "type" field.
func (mc *MessageCreate) SetType(i int) *MessageCreate {
	mc.mutation.SetType(i)
	return mc
}

// SetTimestamp sets the "timestamp" field.
func (mc *MessageCreate) SetTimestamp(t time.Time) *MessageCreate {
	mc.mutation.SetTimestamp(t)
	return mc
}

// SetChatID sets the "chat_id" field.
func (mc *MessageCreate) SetChatID(i int64) *MessageCreate {
	mc.mutation.SetChatID(i)
	return mc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableChatID(i *int64) *MessageCreate {
	if i != nil {
		mc.SetChatID(*i)
	}
	return mc
}

// SetSenderID sets the "sender_id" field.
func (mc *MessageCreate) SetSenderID(i int64) *MessageCreate {
	mc.mutation.SetSenderID(i)
	return mc
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableSenderID(i *int64) *MessageCreate {
	if i != nil {
		mc.SetSenderID(*i)
	}
	return mc
}

// SetFromChatID sets the "from_chat" edge to the Chat entity by ID.
func (mc *MessageCreate) SetFromChatID(id int64) *MessageCreate {
	mc.mutation.SetFromChatID(id)
	return mc
}

// SetNillableFromChatID sets the "from_chat" edge to the Chat entity by ID if the given value is not nil.
func (mc *MessageCreate) SetNillableFromChatID(id *int64) *MessageCreate {
	if id != nil {
		mc = mc.SetFromChatID(*id)
	}
	return mc
}

// SetFromChat sets the "from_chat" edge to the Chat entity.
func (mc *MessageCreate) SetFromChat(c *Chat) *MessageCreate {
	return mc.SetFromChatID(c.ID)
}

// SetFromSenderID sets the "from_sender" edge to the Sender entity by ID.
func (mc *MessageCreate) SetFromSenderID(id int64) *MessageCreate {
	mc.mutation.SetFromSenderID(id)
	return mc
}

// SetNillableFromSenderID sets the "from_sender" edge to the Sender entity by ID if the given value is not nil.
func (mc *MessageCreate) SetNillableFromSenderID(id *int64) *MessageCreate {
	if id != nil {
		mc = mc.SetFromSenderID(*id)
	}
	return mc
}

// SetFromSender sets the "from_sender" edge to the Sender entity.
func (mc *MessageCreate) SetFromSender(s *Sender) *MessageCreate {
	return mc.SetFromSenderID(s.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MessageCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MessageCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.Msg(); !ok {
		return &ValidationError{Name: "msg", err: errors.New(`ent: missing required field "Message.msg"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Message.type"`)}
	}
	if _, ok := mc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Message.timestamp"`)}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: message.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Msg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: message.FieldMsg,
		})
		_node.Msg = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldType,
		})
		_node.Type = value
	}
	if value, ok := mc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if nodes := mc.mutation.FromChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.FromChatTable,
			Columns: []string{message.FromChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChatID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.FromSenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.FromSenderTable,
			Columns: []string{message.FromSenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SenderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Message.Create().
//		SetMsg(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageUpsert) {
//			SetMsg(v+v).
//		}).
//		Exec(ctx)
//
func (mc *MessageCreate) OnConflict(opts ...sql.ConflictOption) *MessageUpsertOne {
	mc.conflict = opts
	return &MessageUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mc *MessageCreate) OnConflictColumns(columns ...string) *MessageUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MessageUpsertOne{
		create: mc,
	}
}

type (
	// MessageUpsertOne is the builder for "upsert"-ing
	//  one Message node.
	MessageUpsertOne struct {
		create *MessageCreate
	}

	// MessageUpsert is the "OnConflict" setter.
	MessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetMsg sets the "msg" field.
func (u *MessageUpsert) SetMsg(v []byte) *MessageUpsert {
	u.Set(message.FieldMsg, v)
	return u
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *MessageUpsert) UpdateMsg() *MessageUpsert {
	u.SetExcluded(message.FieldMsg)
	return u
}

// SetType sets the "type" field.
func (u *MessageUpsert) SetType(v int) *MessageUpsert {
	u.Set(message.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsert) UpdateType() *MessageUpsert {
	u.SetExcluded(message.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *MessageUpsert) AddType(v int) *MessageUpsert {
	u.Add(message.FieldType, v)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *MessageUpsert) SetTimestamp(v time.Time) *MessageUpsert {
	u.Set(message.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MessageUpsert) UpdateTimestamp() *MessageUpsert {
	u.SetExcluded(message.FieldTimestamp)
	return u
}

// SetChatID sets the "chat_id" field.
func (u *MessageUpsert) SetChatID(v int64) *MessageUpsert {
	u.Set(message.FieldChatID, v)
	return u
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *MessageUpsert) UpdateChatID() *MessageUpsert {
	u.SetExcluded(message.FieldChatID)
	return u
}

// ClearChatID clears the value of the "chat_id" field.
func (u *MessageUpsert) ClearChatID() *MessageUpsert {
	u.SetNull(message.FieldChatID)
	return u
}

// SetSenderID sets the "sender_id" field.
func (u *MessageUpsert) SetSenderID(v int64) *MessageUpsert {
	u.Set(message.FieldSenderID, v)
	return u
}

// UpdateSenderID sets the "sender_id" field to the value that was provided on create.
func (u *MessageUpsert) UpdateSenderID() *MessageUpsert {
	u.SetExcluded(message.FieldSenderID)
	return u
}

// ClearSenderID clears the value of the "sender_id" field.
func (u *MessageUpsert) ClearSenderID() *MessageUpsert {
	u.SetNull(message.FieldSenderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *MessageUpsertOne) UpdateNewValues() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Message.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MessageUpsertOne) Ignore() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageUpsertOne) DoNothing() *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageCreate.OnConflict
// documentation for more info.
func (u *MessageUpsertOne) Update(set func(*MessageUpsert)) *MessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetMsg sets the "msg" field.
func (u *MessageUpsertOne) SetMsg(v []byte) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateMsg() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateMsg()
	})
}

// SetType sets the "type" field.
func (u *MessageUpsertOne) SetType(v int) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MessageUpsertOne) AddType(v int) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateType() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateType()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *MessageUpsertOne) SetTimestamp(v time.Time) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateTimestamp() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateTimestamp()
	})
}

// SetChatID sets the "chat_id" field.
func (u *MessageUpsertOne) SetChatID(v int64) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateChatID() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateChatID()
	})
}

// ClearChatID clears the value of the "chat_id" field.
func (u *MessageUpsertOne) ClearChatID() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearChatID()
	})
}

// SetSenderID sets the "sender_id" field.
func (u *MessageUpsertOne) SetSenderID(v int64) *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.SetSenderID(v)
	})
}

// UpdateSenderID sets the "sender_id" field to the value that was provided on create.
func (u *MessageUpsertOne) UpdateSenderID() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateSenderID()
	})
}

// ClearSenderID clears the value of the "sender_id" field.
func (u *MessageUpsertOne) ClearSenderID() *MessageUpsertOne {
	return u.Update(func(s *MessageUpsert) {
		s.ClearSenderID()
	})
}

// Exec executes the query.
func (u *MessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	builders []*MessageCreate
	conflict []sql.ConflictOption
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Message.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageUpsert) {
//			SetMsg(v+v).
//		}).
//		Exec(ctx)
//
func (mcb *MessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageUpsertBulk {
	mcb.conflict = opts
	return &MessageUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mcb *MessageCreateBulk) OnConflictColumns(columns ...string) *MessageUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MessageUpsertBulk{
		create: mcb,
	}
}

// MessageUpsertBulk is the builder for "upsert"-ing
// a bulk of Message nodes.
type MessageUpsertBulk struct {
	create *MessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *MessageUpsertBulk) UpdateNewValues() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Message.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MessageUpsertBulk) Ignore() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageUpsertBulk) DoNothing() *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageCreateBulk.OnConflict
// documentation for more info.
func (u *MessageUpsertBulk) Update(set func(*MessageUpsert)) *MessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetMsg sets the "msg" field.
func (u *MessageUpsertBulk) SetMsg(v []byte) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateMsg() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateMsg()
	})
}

// SetType sets the "type" field.
func (u *MessageUpsertBulk) SetType(v int) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MessageUpsertBulk) AddType(v int) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateType() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateType()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *MessageUpsertBulk) SetTimestamp(v time.Time) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateTimestamp() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateTimestamp()
	})
}

// SetChatID sets the "chat_id" field.
func (u *MessageUpsertBulk) SetChatID(v int64) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateChatID() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateChatID()
	})
}

// ClearChatID clears the value of the "chat_id" field.
func (u *MessageUpsertBulk) ClearChatID() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearChatID()
	})
}

// SetSenderID sets the "sender_id" field.
func (u *MessageUpsertBulk) SetSenderID(v int64) *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.SetSenderID(v)
	})
}

// UpdateSenderID sets the "sender_id" field to the value that was provided on create.
func (u *MessageUpsertBulk) UpdateSenderID() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.UpdateSenderID()
	})
}

// ClearSenderID clears the value of the "sender_id" field.
func (u *MessageUpsertBulk) ClearSenderID() *MessageUpsertBulk {
	return u.Update(func(s *MessageUpsert) {
		s.ClearSenderID()
	})
}

// Exec executes the query.
func (u *MessageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
