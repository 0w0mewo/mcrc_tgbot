// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/message"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/sender"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Msg holds the value of the "msg" field.
	Msg []byte `json:"msg,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID *int64 `json:"chat_id,omitempty"`
	// SenderID holds the value of the "sender_id" field.
	SenderID *int64 `json:"sender_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges MessageEdges `json:"edges"`
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// FromChat holds the value of the from_chat edge.
	FromChat *Chat `json:"from_chat,omitempty"`
	// FromSender holds the value of the from_sender edge.
	FromSender *Sender `json:"from_sender,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromChatOrErr returns the FromChat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) FromChatOrErr() (*Chat, error) {
	if e.loadedTypes[0] {
		if e.FromChat == nil {
			// The edge from_chat was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.FromChat, nil
	}
	return nil, &NotLoadedError{edge: "from_chat"}
}

// FromSenderOrErr returns the FromSender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) FromSenderOrErr() (*Sender, error) {
	if e.loadedTypes[1] {
		if e.FromSender == nil {
			// The edge from_sender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sender.Label}
		}
		return e.FromSender, nil
	}
	return nil, &NotLoadedError{edge: "from_sender"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldMsg:
			values[i] = new([]byte)
		case message.FieldID, message.FieldType, message.FieldChatID, message.FieldSenderID:
			values[i] = new(sql.NullInt64)
		case message.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldMsg:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field msg", values[i])
			} else if value != nil {
				m.Msg = *value
			}
		case message.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = int(value.Int64)
			}
		case message.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				m.Timestamp = value.Time
			}
		case message.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				m.ChatID = new(int64)
				*m.ChatID = value.Int64
			}
		case message.FieldSenderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value.Valid {
				m.SenderID = new(int64)
				*m.SenderID = value.Int64
			}
		}
	}
	return nil
}

// QueryFromChat queries the "from_chat" edge of the Message entity.
func (m *Message) QueryFromChat() *ChatQuery {
	return (&MessageClient{config: m.config}).QueryFromChat(m)
}

// QueryFromSender queries the "from_sender" edge of the Message entity.
func (m *Message) QueryFromSender() *SenderQuery {
	return (&MessageClient{config: m.config}).QueryFromSender(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", msg=")
	builder.WriteString(fmt.Sprintf("%v", m.Msg))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", m.Type))
	builder.WriteString(", timestamp=")
	builder.WriteString(m.Timestamp.Format(time.ANSIC))
	if v := m.ChatID; v != nil {
		builder.WriteString(", chat_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := m.SenderID; v != nil {
		builder.WriteString(", sender_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
