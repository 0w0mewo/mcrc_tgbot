// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/sender"
)

// Sender is the model entity for the Sender schema.
type Sender struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sender) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sender.FieldID:
			values[i] = new(sql.NullInt64)
		case sender.FieldUsername:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sender", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sender fields.
func (s *Sender) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sender.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case sender.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Sender.
// Note that you need to call Sender.Unwrap() before calling this method if this Sender
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sender) Update() *SenderUpdateOne {
	return (&SenderClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sender entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sender) Unwrap() *Sender {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sender is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sender) String() string {
	var builder strings.Builder
	builder.WriteString("Sender(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", username=")
	builder.WriteString(s.Username)
	builder.WriteByte(')')
	return builder.String()
}

// Senders is a parsable slice of Sender.
type Senders []*Sender

func (s Senders) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
