// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"
)

// TweetUserCreate is the builder for creating a TweetUser entity.
type TweetUserCreate struct {
	config
	mutation *TweetUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (tuc *TweetUserCreate) SetUsername(s string) *TweetUserCreate {
	tuc.mutation.SetUsername(s)
	return tuc
}

// SetID sets the "id" field.
func (tuc *TweetUserCreate) SetID(s string) *TweetUserCreate {
	tuc.mutation.SetID(s)
	return tuc
}

// Mutation returns the TweetUserMutation object of the builder.
func (tuc *TweetUserCreate) Mutation() *TweetUserMutation {
	return tuc.mutation
}

// Save creates the TweetUser in the database.
func (tuc *TweetUserCreate) Save(ctx context.Context) (*TweetUser, error) {
	var (
		err  error
		node *TweetUser
	)
	if len(tuc.hooks) == 0 {
		if err = tuc.check(); err != nil {
			return nil, err
		}
		node, err = tuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TweetUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuc.check(); err != nil {
				return nil, err
			}
			tuc.mutation = mutation
			if node, err = tuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tuc.hooks) - 1; i >= 0; i-- {
			if tuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TweetUserCreate) SaveX(ctx context.Context) *TweetUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TweetUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TweetUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TweetUserCreate) check() error {
	if _, ok := tuc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "TweetUser.username"`)}
	}
	return nil
}

func (tuc *TweetUserCreate) sqlSave(ctx context.Context) (*TweetUser, error) {
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TweetUser.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (tuc *TweetUserCreate) createSpec() (*TweetUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TweetUser{config: tuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tweetuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tweetuser.FieldID,
			},
		}
	)
	_spec.OnConflict = tuc.conflict
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tweetuser.FieldUsername,
		})
		_node.Username = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TweetUser.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TweetUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
//
func (tuc *TweetUserCreate) OnConflict(opts ...sql.ConflictOption) *TweetUserUpsertOne {
	tuc.conflict = opts
	return &TweetUserUpsertOne{
		create: tuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TweetUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tuc *TweetUserCreate) OnConflictColumns(columns ...string) *TweetUserUpsertOne {
	tuc.conflict = append(tuc.conflict, sql.ConflictColumns(columns...))
	return &TweetUserUpsertOne{
		create: tuc,
	}
}

type (
	// TweetUserUpsertOne is the builder for "upsert"-ing
	//  one TweetUser node.
	TweetUserUpsertOne struct {
		create *TweetUserCreate
	}

	// TweetUserUpsert is the "OnConflict" setter.
	TweetUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *TweetUserUpsert) SetUsername(v string) *TweetUserUpsert {
	u.Set(tweetuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TweetUserUpsert) UpdateUsername() *TweetUserUpsert {
	u.SetExcluded(tweetuser.FieldUsername)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TweetUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tweetuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TweetUserUpsertOne) UpdateNewValues() *TweetUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tweetuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TweetUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TweetUserUpsertOne) Ignore() *TweetUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TweetUserUpsertOne) DoNothing() *TweetUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TweetUserCreate.OnConflict
// documentation for more info.
func (u *TweetUserUpsertOne) Update(set func(*TweetUserUpsert)) *TweetUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TweetUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *TweetUserUpsertOne) SetUsername(v string) *TweetUserUpsertOne {
	return u.Update(func(s *TweetUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TweetUserUpsertOne) UpdateUsername() *TweetUserUpsertOne {
	return u.Update(func(s *TweetUserUpsert) {
		s.UpdateUsername()
	})
}

// Exec executes the query.
func (u *TweetUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TweetUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TweetUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TweetUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TweetUserUpsertOne.ID is not supported by MySQL driver. Use TweetUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TweetUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TweetUserCreateBulk is the builder for creating many TweetUser entities in bulk.
type TweetUserCreateBulk struct {
	config
	builders []*TweetUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TweetUser entities in the database.
func (tucb *TweetUserCreateBulk) Save(ctx context.Context) ([]*TweetUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TweetUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TweetUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TweetUserCreateBulk) SaveX(ctx context.Context) []*TweetUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TweetUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TweetUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TweetUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TweetUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
//
func (tucb *TweetUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TweetUserUpsertBulk {
	tucb.conflict = opts
	return &TweetUserUpsertBulk{
		create: tucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TweetUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tucb *TweetUserCreateBulk) OnConflictColumns(columns ...string) *TweetUserUpsertBulk {
	tucb.conflict = append(tucb.conflict, sql.ConflictColumns(columns...))
	return &TweetUserUpsertBulk{
		create: tucb,
	}
}

// TweetUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TweetUser nodes.
type TweetUserUpsertBulk struct {
	create *TweetUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TweetUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tweetuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TweetUserUpsertBulk) UpdateNewValues() *TweetUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tweetuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TweetUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TweetUserUpsertBulk) Ignore() *TweetUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TweetUserUpsertBulk) DoNothing() *TweetUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TweetUserCreateBulk.OnConflict
// documentation for more info.
func (u *TweetUserUpsertBulk) Update(set func(*TweetUserUpsert)) *TweetUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TweetUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *TweetUserUpsertBulk) SetUsername(v string) *TweetUserUpsertBulk {
	return u.Update(func(s *TweetUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TweetUserUpsertBulk) UpdateUsername() *TweetUserUpsertBulk {
	return u.Update(func(s *TweetUserUpsert) {
		s.UpdateUsername()
	})
}

// Exec executes the query.
func (u *TweetUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TweetUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TweetUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TweetUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
