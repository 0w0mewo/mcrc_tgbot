// Code generated by entc, DO NOT EDIT.

package chattweetsubscription

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v int64) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatID), v))
	})
}

// TweeterID applies equality check predicate on the "tweeter_id" field. It's identical to TweeterIDEQ.
func TweeterID(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTweeterID), v))
	})
}

// LastTweet applies equality check predicate on the "last_tweet" field. It's identical to LastTweetEQ.
func LastTweet(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTweet), v))
	})
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v int64) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatID), v))
	})
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v int64) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChatID), v))
	})
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...int64) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChatID), v...))
	})
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...int64) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChatID), v...))
	})
}

// ChatIDIsNil applies the IsNil predicate on the "chat_id" field.
func ChatIDIsNil() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChatID)))
	})
}

// ChatIDNotNil applies the NotNil predicate on the "chat_id" field.
func ChatIDNotNil() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChatID)))
	})
}

// TweeterIDEQ applies the EQ predicate on the "tweeter_id" field.
func TweeterIDEQ(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTweeterID), v))
	})
}

// TweeterIDNEQ applies the NEQ predicate on the "tweeter_id" field.
func TweeterIDNEQ(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTweeterID), v))
	})
}

// TweeterIDIn applies the In predicate on the "tweeter_id" field.
func TweeterIDIn(vs ...string) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTweeterID), v...))
	})
}

// TweeterIDNotIn applies the NotIn predicate on the "tweeter_id" field.
func TweeterIDNotIn(vs ...string) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTweeterID), v...))
	})
}

// TweeterIDGT applies the GT predicate on the "tweeter_id" field.
func TweeterIDGT(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTweeterID), v))
	})
}

// TweeterIDGTE applies the GTE predicate on the "tweeter_id" field.
func TweeterIDGTE(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTweeterID), v))
	})
}

// TweeterIDLT applies the LT predicate on the "tweeter_id" field.
func TweeterIDLT(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTweeterID), v))
	})
}

// TweeterIDLTE applies the LTE predicate on the "tweeter_id" field.
func TweeterIDLTE(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTweeterID), v))
	})
}

// TweeterIDContains applies the Contains predicate on the "tweeter_id" field.
func TweeterIDContains(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTweeterID), v))
	})
}

// TweeterIDHasPrefix applies the HasPrefix predicate on the "tweeter_id" field.
func TweeterIDHasPrefix(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTweeterID), v))
	})
}

// TweeterIDHasSuffix applies the HasSuffix predicate on the "tweeter_id" field.
func TweeterIDHasSuffix(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTweeterID), v))
	})
}

// TweeterIDIsNil applies the IsNil predicate on the "tweeter_id" field.
func TweeterIDIsNil() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTweeterID)))
	})
}

// TweeterIDNotNil applies the NotNil predicate on the "tweeter_id" field.
func TweeterIDNotNil() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTweeterID)))
	})
}

// TweeterIDEqualFold applies the EqualFold predicate on the "tweeter_id" field.
func TweeterIDEqualFold(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTweeterID), v))
	})
}

// TweeterIDContainsFold applies the ContainsFold predicate on the "tweeter_id" field.
func TweeterIDContainsFold(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTweeterID), v))
	})
}

// LastTweetEQ applies the EQ predicate on the "last_tweet" field.
func LastTweetEQ(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastTweet), v))
	})
}

// LastTweetNEQ applies the NEQ predicate on the "last_tweet" field.
func LastTweetNEQ(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastTweet), v))
	})
}

// LastTweetIn applies the In predicate on the "last_tweet" field.
func LastTweetIn(vs ...string) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastTweet), v...))
	})
}

// LastTweetNotIn applies the NotIn predicate on the "last_tweet" field.
func LastTweetNotIn(vs ...string) predicate.ChatTweetSubscription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastTweet), v...))
	})
}

// LastTweetGT applies the GT predicate on the "last_tweet" field.
func LastTweetGT(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastTweet), v))
	})
}

// LastTweetGTE applies the GTE predicate on the "last_tweet" field.
func LastTweetGTE(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastTweet), v))
	})
}

// LastTweetLT applies the LT predicate on the "last_tweet" field.
func LastTweetLT(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastTweet), v))
	})
}

// LastTweetLTE applies the LTE predicate on the "last_tweet" field.
func LastTweetLTE(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastTweet), v))
	})
}

// LastTweetContains applies the Contains predicate on the "last_tweet" field.
func LastTweetContains(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastTweet), v))
	})
}

// LastTweetHasPrefix applies the HasPrefix predicate on the "last_tweet" field.
func LastTweetHasPrefix(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastTweet), v))
	})
}

// LastTweetHasSuffix applies the HasSuffix predicate on the "last_tweet" field.
func LastTweetHasSuffix(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastTweet), v))
	})
}

// LastTweetEqualFold applies the EqualFold predicate on the "last_tweet" field.
func LastTweetEqualFold(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastTweet), v))
	})
}

// LastTweetContainsFold applies the ContainsFold predicate on the "last_tweet" field.
func LastTweetContainsFold(v string) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastTweet), v))
	})
}

// HasSubscribedTweeter applies the HasEdge predicate on the "subscribed_tweeter" edge.
func HasSubscribedTweeter() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedTweeterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribedTweeterTable, SubscribedTweeterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedTweeterWith applies the HasEdge predicate on the "subscribed_tweeter" edge with a given conditions (other predicates).
func HasSubscribedTweeterWith(preds ...predicate.TweetUser) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedTweeterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribedTweeterTable, SubscribedTweeterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribedChat applies the HasEdge predicate on the "subscribed_chat" edge.
func HasSubscribedChat() predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedChatTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribedChatTable, SubscribedChatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedChatWith applies the HasEdge predicate on the "subscribed_chat" edge with a given conditions (other predicates).
func HasSubscribedChatWith(preds ...predicate.Chat) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribedChatInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribedChatTable, SubscribedChatColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatTweetSubscription) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatTweetSubscription) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatTweetSubscription) predicate.ChatTweetSubscription {
	return predicate.ChatTweetSubscription(func(s *sql.Selector) {
		p(s.Not())
	})
}
