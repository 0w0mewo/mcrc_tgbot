// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chattweetsubscription"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/message"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/predicate"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/sender"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChat                  = "Chat"
	TypeChatTweetSubscription = "ChatTweetSubscription"
	TypeMessage               = "Message"
	TypeSender                = "Sender"
	TypeTweetUser             = "TweetUser"
)

// ChatMutation represents an operation that mutates the Chat nodes in the graph.
type ChatMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Chat, error)
	predicates    []predicate.Chat
}

var _ ent.Mutation = (*ChatMutation)(nil)

// chatOption allows management of the mutation configuration using functional options.
type chatOption func(*ChatMutation)

// newChatMutation creates new mutation for the Chat entity.
func newChatMutation(c config, op Op, opts ...chatOption) *ChatMutation {
	m := &ChatMutation{
		config:        c,
		op:            op,
		typ:           TypeChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatID sets the ID field of the mutation.
func withChatID(id int64) chatOption {
	return func(m *ChatMutation) {
		var (
			err   error
			once  sync.Once
			value *Chat
		)
		m.oldValue = func(ctx context.Context) (*Chat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChat sets the old Chat of the mutation.
func withChat(node *Chat) chatOption {
	return func(m *ChatMutation) {
		m.oldValue = func(context.Context) (*Chat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chat entities.
func (m *ChatMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ChatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChatMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the ChatMutation builder.
func (m *ChatMutation) Where(ps ...predicate.Chat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Chat).
func (m *ChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, chat.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chat.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Chat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMutation) ResetField(name string) error {
	switch name {
	case chat.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Chat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Chat edge %s", name)
}

// ChatTweetSubscriptionMutation represents an operation that mutates the ChatTweetSubscription nodes in the graph.
type ChatTweetSubscriptionMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	last_tweet                *string
	clearedFields             map[string]struct{}
	subscribed_tweeter        *string
	clearedsubscribed_tweeter bool
	subscribed_chat           *int64
	clearedsubscribed_chat    bool
	done                      bool
	oldValue                  func(context.Context) (*ChatTweetSubscription, error)
	predicates                []predicate.ChatTweetSubscription
}

var _ ent.Mutation = (*ChatTweetSubscriptionMutation)(nil)

// chattweetsubscriptionOption allows management of the mutation configuration using functional options.
type chattweetsubscriptionOption func(*ChatTweetSubscriptionMutation)

// newChatTweetSubscriptionMutation creates new mutation for the ChatTweetSubscription entity.
func newChatTweetSubscriptionMutation(c config, op Op, opts ...chattweetsubscriptionOption) *ChatTweetSubscriptionMutation {
	m := &ChatTweetSubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeChatTweetSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatTweetSubscriptionID sets the ID field of the mutation.
func withChatTweetSubscriptionID(id int) chattweetsubscriptionOption {
	return func(m *ChatTweetSubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatTweetSubscription
		)
		m.oldValue = func(ctx context.Context) (*ChatTweetSubscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatTweetSubscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatTweetSubscription sets the old ChatTweetSubscription of the mutation.
func withChatTweetSubscription(node *ChatTweetSubscription) chattweetsubscriptionOption {
	return func(m *ChatTweetSubscriptionMutation) {
		m.oldValue = func(context.Context) (*ChatTweetSubscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatTweetSubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatTweetSubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatTweetSubscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatTweetSubscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatTweetSubscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatTweetSubscriptionMutation) SetChatID(i int64) {
	m.subscribed_chat = &i
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatTweetSubscriptionMutation) ChatID() (r int64, exists bool) {
	v := m.subscribed_chat
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the ChatTweetSubscription entity.
// If the ChatTweetSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatTweetSubscriptionMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ClearChatID clears the value of the "chat_id" field.
func (m *ChatTweetSubscriptionMutation) ClearChatID() {
	m.subscribed_chat = nil
	m.clearedFields[chattweetsubscription.FieldChatID] = struct{}{}
}

// ChatIDCleared returns if the "chat_id" field was cleared in this mutation.
func (m *ChatTweetSubscriptionMutation) ChatIDCleared() bool {
	_, ok := m.clearedFields[chattweetsubscription.FieldChatID]
	return ok
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatTweetSubscriptionMutation) ResetChatID() {
	m.subscribed_chat = nil
	delete(m.clearedFields, chattweetsubscription.FieldChatID)
}

// SetTweeterID sets the "tweeter_id" field.
func (m *ChatTweetSubscriptionMutation) SetTweeterID(s string) {
	m.subscribed_tweeter = &s
}

// TweeterID returns the value of the "tweeter_id" field in the mutation.
func (m *ChatTweetSubscriptionMutation) TweeterID() (r string, exists bool) {
	v := m.subscribed_tweeter
	if v == nil {
		return
	}
	return *v, true
}

// OldTweeterID returns the old "tweeter_id" field's value of the ChatTweetSubscription entity.
// If the ChatTweetSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatTweetSubscriptionMutation) OldTweeterID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTweeterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTweeterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTweeterID: %w", err)
	}
	return oldValue.TweeterID, nil
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (m *ChatTweetSubscriptionMutation) ClearTweeterID() {
	m.subscribed_tweeter = nil
	m.clearedFields[chattweetsubscription.FieldTweeterID] = struct{}{}
}

// TweeterIDCleared returns if the "tweeter_id" field was cleared in this mutation.
func (m *ChatTweetSubscriptionMutation) TweeterIDCleared() bool {
	_, ok := m.clearedFields[chattweetsubscription.FieldTweeterID]
	return ok
}

// ResetTweeterID resets all changes to the "tweeter_id" field.
func (m *ChatTweetSubscriptionMutation) ResetTweeterID() {
	m.subscribed_tweeter = nil
	delete(m.clearedFields, chattweetsubscription.FieldTweeterID)
}

// SetLastTweet sets the "last_tweet" field.
func (m *ChatTweetSubscriptionMutation) SetLastTweet(s string) {
	m.last_tweet = &s
}

// LastTweet returns the value of the "last_tweet" field in the mutation.
func (m *ChatTweetSubscriptionMutation) LastTweet() (r string, exists bool) {
	v := m.last_tweet
	if v == nil {
		return
	}
	return *v, true
}

// OldLastTweet returns the old "last_tweet" field's value of the ChatTweetSubscription entity.
// If the ChatTweetSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatTweetSubscriptionMutation) OldLastTweet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastTweet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastTweet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastTweet: %w", err)
	}
	return oldValue.LastTweet, nil
}

// ResetLastTweet resets all changes to the "last_tweet" field.
func (m *ChatTweetSubscriptionMutation) ResetLastTweet() {
	m.last_tweet = nil
}

// SetSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by id.
func (m *ChatTweetSubscriptionMutation) SetSubscribedTweeterID(id string) {
	m.subscribed_tweeter = &id
}

// ClearSubscribedTweeter clears the "subscribed_tweeter" edge to the TweetUser entity.
func (m *ChatTweetSubscriptionMutation) ClearSubscribedTweeter() {
	m.clearedsubscribed_tweeter = true
}

// SubscribedTweeterCleared reports if the "subscribed_tweeter" edge to the TweetUser entity was cleared.
func (m *ChatTweetSubscriptionMutation) SubscribedTweeterCleared() bool {
	return m.TweeterIDCleared() || m.clearedsubscribed_tweeter
}

// SubscribedTweeterID returns the "subscribed_tweeter" edge ID in the mutation.
func (m *ChatTweetSubscriptionMutation) SubscribedTweeterID() (id string, exists bool) {
	if m.subscribed_tweeter != nil {
		return *m.subscribed_tweeter, true
	}
	return
}

// SubscribedTweeterIDs returns the "subscribed_tweeter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribedTweeterID instead. It exists only for internal usage by the builders.
func (m *ChatTweetSubscriptionMutation) SubscribedTweeterIDs() (ids []string) {
	if id := m.subscribed_tweeter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribedTweeter resets all changes to the "subscribed_tweeter" edge.
func (m *ChatTweetSubscriptionMutation) ResetSubscribedTweeter() {
	m.subscribed_tweeter = nil
	m.clearedsubscribed_tweeter = false
}

// SetSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by id.
func (m *ChatTweetSubscriptionMutation) SetSubscribedChatID(id int64) {
	m.subscribed_chat = &id
}

// ClearSubscribedChat clears the "subscribed_chat" edge to the Chat entity.
func (m *ChatTweetSubscriptionMutation) ClearSubscribedChat() {
	m.clearedsubscribed_chat = true
}

// SubscribedChatCleared reports if the "subscribed_chat" edge to the Chat entity was cleared.
func (m *ChatTweetSubscriptionMutation) SubscribedChatCleared() bool {
	return m.ChatIDCleared() || m.clearedsubscribed_chat
}

// SubscribedChatID returns the "subscribed_chat" edge ID in the mutation.
func (m *ChatTweetSubscriptionMutation) SubscribedChatID() (id int64, exists bool) {
	if m.subscribed_chat != nil {
		return *m.subscribed_chat, true
	}
	return
}

// SubscribedChatIDs returns the "subscribed_chat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribedChatID instead. It exists only for internal usage by the builders.
func (m *ChatTweetSubscriptionMutation) SubscribedChatIDs() (ids []int64) {
	if id := m.subscribed_chat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribedChat resets all changes to the "subscribed_chat" edge.
func (m *ChatTweetSubscriptionMutation) ResetSubscribedChat() {
	m.subscribed_chat = nil
	m.clearedsubscribed_chat = false
}

// Where appends a list predicates to the ChatTweetSubscriptionMutation builder.
func (m *ChatTweetSubscriptionMutation) Where(ps ...predicate.ChatTweetSubscription) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChatTweetSubscriptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ChatTweetSubscription).
func (m *ChatTweetSubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatTweetSubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.subscribed_chat != nil {
		fields = append(fields, chattweetsubscription.FieldChatID)
	}
	if m.subscribed_tweeter != nil {
		fields = append(fields, chattweetsubscription.FieldTweeterID)
	}
	if m.last_tweet != nil {
		fields = append(fields, chattweetsubscription.FieldLastTweet)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatTweetSubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chattweetsubscription.FieldChatID:
		return m.ChatID()
	case chattweetsubscription.FieldTweeterID:
		return m.TweeterID()
	case chattweetsubscription.FieldLastTweet:
		return m.LastTweet()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatTweetSubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chattweetsubscription.FieldChatID:
		return m.OldChatID(ctx)
	case chattweetsubscription.FieldTweeterID:
		return m.OldTweeterID(ctx)
	case chattweetsubscription.FieldLastTweet:
		return m.OldLastTweet(ctx)
	}
	return nil, fmt.Errorf("unknown ChatTweetSubscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatTweetSubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chattweetsubscription.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case chattweetsubscription.FieldTweeterID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTweeterID(v)
		return nil
	case chattweetsubscription.FieldLastTweet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastTweet(v)
		return nil
	}
	return fmt.Errorf("unknown ChatTweetSubscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatTweetSubscriptionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatTweetSubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatTweetSubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatTweetSubscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatTweetSubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chattweetsubscription.FieldChatID) {
		fields = append(fields, chattweetsubscription.FieldChatID)
	}
	if m.FieldCleared(chattweetsubscription.FieldTweeterID) {
		fields = append(fields, chattweetsubscription.FieldTweeterID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatTweetSubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatTweetSubscriptionMutation) ClearField(name string) error {
	switch name {
	case chattweetsubscription.FieldChatID:
		m.ClearChatID()
		return nil
	case chattweetsubscription.FieldTweeterID:
		m.ClearTweeterID()
		return nil
	}
	return fmt.Errorf("unknown ChatTweetSubscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatTweetSubscriptionMutation) ResetField(name string) error {
	switch name {
	case chattweetsubscription.FieldChatID:
		m.ResetChatID()
		return nil
	case chattweetsubscription.FieldTweeterID:
		m.ResetTweeterID()
		return nil
	case chattweetsubscription.FieldLastTweet:
		m.ResetLastTweet()
		return nil
	}
	return fmt.Errorf("unknown ChatTweetSubscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatTweetSubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.subscribed_tweeter != nil {
		edges = append(edges, chattweetsubscription.EdgeSubscribedTweeter)
	}
	if m.subscribed_chat != nil {
		edges = append(edges, chattweetsubscription.EdgeSubscribedChat)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatTweetSubscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chattweetsubscription.EdgeSubscribedTweeter:
		if id := m.subscribed_tweeter; id != nil {
			return []ent.Value{*id}
		}
	case chattweetsubscription.EdgeSubscribedChat:
		if id := m.subscribed_chat; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatTweetSubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatTweetSubscriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatTweetSubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubscribed_tweeter {
		edges = append(edges, chattweetsubscription.EdgeSubscribedTweeter)
	}
	if m.clearedsubscribed_chat {
		edges = append(edges, chattweetsubscription.EdgeSubscribedChat)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatTweetSubscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case chattweetsubscription.EdgeSubscribedTweeter:
		return m.clearedsubscribed_tweeter
	case chattweetsubscription.EdgeSubscribedChat:
		return m.clearedsubscribed_chat
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatTweetSubscriptionMutation) ClearEdge(name string) error {
	switch name {
	case chattweetsubscription.EdgeSubscribedTweeter:
		m.ClearSubscribedTweeter()
		return nil
	case chattweetsubscription.EdgeSubscribedChat:
		m.ClearSubscribedChat()
		return nil
	}
	return fmt.Errorf("unknown ChatTweetSubscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatTweetSubscriptionMutation) ResetEdge(name string) error {
	switch name {
	case chattweetsubscription.EdgeSubscribedTweeter:
		m.ResetSubscribedTweeter()
		return nil
	case chattweetsubscription.EdgeSubscribedChat:
		m.ResetSubscribedChat()
		return nil
	}
	return fmt.Errorf("unknown ChatTweetSubscription edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	msg                *[]byte
	_type              *int
	add_type           *int
	timestamp          *time.Time
	clearedFields      map[string]struct{}
	from_chat          *int64
	clearedfrom_chat   bool
	from_sender        *int64
	clearedfrom_sender bool
	done               bool
	oldValue           func(context.Context) (*Message, error)
	predicates         []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsg sets the "msg" field.
func (m *MessageMutation) SetMsg(b []byte) {
	m.msg = &b
}

// Msg returns the value of the "msg" field in the mutation.
func (m *MessageMutation) Msg() (r []byte, exists bool) {
	v := m.msg
	if v == nil {
		return
	}
	return *v, true
}

// OldMsg returns the old "msg" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsg(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsg: %w", err)
	}
	return oldValue.Msg, nil
}

// ResetMsg resets all changes to the "msg" field.
func (m *MessageMutation) ResetMsg() {
	m.msg = nil
}

// SetType sets the "type" field.
func (m *MessageMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *MessageMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *MessageMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *MessageMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *MessageMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *MessageMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *MessageMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *MessageMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetChatID sets the "chat_id" field.
func (m *MessageMutation) SetChatID(i int64) {
	m.from_chat = &i
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *MessageMutation) ChatID() (r int64, exists bool) {
	v := m.from_chat
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldChatID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ClearChatID clears the value of the "chat_id" field.
func (m *MessageMutation) ClearChatID() {
	m.from_chat = nil
	m.clearedFields[message.FieldChatID] = struct{}{}
}

// ChatIDCleared returns if the "chat_id" field was cleared in this mutation.
func (m *MessageMutation) ChatIDCleared() bool {
	_, ok := m.clearedFields[message.FieldChatID]
	return ok
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *MessageMutation) ResetChatID() {
	m.from_chat = nil
	delete(m.clearedFields, message.FieldChatID)
}

// SetSenderID sets the "sender_id" field.
func (m *MessageMutation) SetSenderID(i int64) {
	m.from_sender = &i
}

// SenderID returns the value of the "sender_id" field in the mutation.
func (m *MessageMutation) SenderID() (r int64, exists bool) {
	v := m.from_sender
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderID returns the old "sender_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSenderID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderID: %w", err)
	}
	return oldValue.SenderID, nil
}

// ClearSenderID clears the value of the "sender_id" field.
func (m *MessageMutation) ClearSenderID() {
	m.from_sender = nil
	m.clearedFields[message.FieldSenderID] = struct{}{}
}

// SenderIDCleared returns if the "sender_id" field was cleared in this mutation.
func (m *MessageMutation) SenderIDCleared() bool {
	_, ok := m.clearedFields[message.FieldSenderID]
	return ok
}

// ResetSenderID resets all changes to the "sender_id" field.
func (m *MessageMutation) ResetSenderID() {
	m.from_sender = nil
	delete(m.clearedFields, message.FieldSenderID)
}

// SetFromChatID sets the "from_chat" edge to the Chat entity by id.
func (m *MessageMutation) SetFromChatID(id int64) {
	m.from_chat = &id
}

// ClearFromChat clears the "from_chat" edge to the Chat entity.
func (m *MessageMutation) ClearFromChat() {
	m.clearedfrom_chat = true
}

// FromChatCleared reports if the "from_chat" edge to the Chat entity was cleared.
func (m *MessageMutation) FromChatCleared() bool {
	return m.ChatIDCleared() || m.clearedfrom_chat
}

// FromChatID returns the "from_chat" edge ID in the mutation.
func (m *MessageMutation) FromChatID() (id int64, exists bool) {
	if m.from_chat != nil {
		return *m.from_chat, true
	}
	return
}

// FromChatIDs returns the "from_chat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromChatID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) FromChatIDs() (ids []int64) {
	if id := m.from_chat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromChat resets all changes to the "from_chat" edge.
func (m *MessageMutation) ResetFromChat() {
	m.from_chat = nil
	m.clearedfrom_chat = false
}

// SetFromSenderID sets the "from_sender" edge to the Sender entity by id.
func (m *MessageMutation) SetFromSenderID(id int64) {
	m.from_sender = &id
}

// ClearFromSender clears the "from_sender" edge to the Sender entity.
func (m *MessageMutation) ClearFromSender() {
	m.clearedfrom_sender = true
}

// FromSenderCleared reports if the "from_sender" edge to the Sender entity was cleared.
func (m *MessageMutation) FromSenderCleared() bool {
	return m.SenderIDCleared() || m.clearedfrom_sender
}

// FromSenderID returns the "from_sender" edge ID in the mutation.
func (m *MessageMutation) FromSenderID() (id int64, exists bool) {
	if m.from_sender != nil {
		return *m.from_sender, true
	}
	return
}

// FromSenderIDs returns the "from_sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromSenderID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) FromSenderIDs() (ids []int64) {
	if id := m.from_sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromSender resets all changes to the "from_sender" edge.
func (m *MessageMutation) ResetFromSender() {
	m.from_sender = nil
	m.clearedfrom_sender = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.msg != nil {
		fields = append(fields, message.FieldMsg)
	}
	if m._type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.timestamp != nil {
		fields = append(fields, message.FieldTimestamp)
	}
	if m.from_chat != nil {
		fields = append(fields, message.FieldChatID)
	}
	if m.from_sender != nil {
		fields = append(fields, message.FieldSenderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldMsg:
		return m.Msg()
	case message.FieldType:
		return m.GetType()
	case message.FieldTimestamp:
		return m.Timestamp()
	case message.FieldChatID:
		return m.ChatID()
	case message.FieldSenderID:
		return m.SenderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldMsg:
		return m.OldMsg(ctx)
	case message.FieldType:
		return m.OldType(ctx)
	case message.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case message.FieldChatID:
		return m.OldChatID(ctx)
	case message.FieldSenderID:
		return m.OldSenderID(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldMsg:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsg(v)
		return nil
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case message.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case message.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case message.FieldSenderID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderID(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, message.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldChatID) {
		fields = append(fields, message.FieldChatID)
	}
	if m.FieldCleared(message.FieldSenderID) {
		fields = append(fields, message.FieldSenderID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldChatID:
		m.ClearChatID()
		return nil
	case message.FieldSenderID:
		m.ClearSenderID()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldMsg:
		m.ResetMsg()
		return nil
	case message.FieldType:
		m.ResetType()
		return nil
	case message.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case message.FieldChatID:
		m.ResetChatID()
		return nil
	case message.FieldSenderID:
		m.ResetSenderID()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.from_chat != nil {
		edges = append(edges, message.EdgeFromChat)
	}
	if m.from_sender != nil {
		edges = append(edges, message.EdgeFromSender)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeFromChat:
		if id := m.from_chat; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeFromSender:
		if id := m.from_sender; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfrom_chat {
		edges = append(edges, message.EdgeFromChat)
	}
	if m.clearedfrom_sender {
		edges = append(edges, message.EdgeFromSender)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeFromChat:
		return m.clearedfrom_chat
	case message.EdgeFromSender:
		return m.clearedfrom_sender
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeFromChat:
		m.ClearFromChat()
		return nil
	case message.EdgeFromSender:
		m.ClearFromSender()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeFromChat:
		m.ResetFromChat()
		return nil
	case message.EdgeFromSender:
		m.ResetFromSender()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// SenderMutation represents an operation that mutates the Sender nodes in the graph.
type SenderMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	username      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Sender, error)
	predicates    []predicate.Sender
}

var _ ent.Mutation = (*SenderMutation)(nil)

// senderOption allows management of the mutation configuration using functional options.
type senderOption func(*SenderMutation)

// newSenderMutation creates new mutation for the Sender entity.
func newSenderMutation(c config, op Op, opts ...senderOption) *SenderMutation {
	m := &SenderMutation{
		config:        c,
		op:            op,
		typ:           TypeSender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSenderID sets the ID field of the mutation.
func withSenderID(id int64) senderOption {
	return func(m *SenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Sender
		)
		m.oldValue = func(ctx context.Context) (*Sender, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSender sets the old Sender of the mutation.
func withSender(node *Sender) senderOption {
	return func(m *SenderMutation) {
		m.oldValue = func(context.Context) (*Sender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Sender entities.
func (m *SenderMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SenderMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SenderMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sender.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *SenderMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *SenderMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Sender entity.
// If the Sender object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenderMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *SenderMutation) ResetUsername() {
	m.username = nil
}

// Where appends a list predicates to the SenderMutation builder.
func (m *SenderMutation) Where(ps ...predicate.Sender) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Sender).
func (m *SenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.username != nil {
		fields = append(fields, sender.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sender.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sender.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown Sender field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sender.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown Sender field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Sender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sender nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SenderMutation) ResetField(name string) error {
	switch name {
	case sender.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown Sender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SenderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SenderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SenderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SenderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Sender unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SenderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Sender edge %s", name)
}

// TweetUserMutation represents an operation that mutates the TweetUser nodes in the graph.
type TweetUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	username      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TweetUser, error)
	predicates    []predicate.TweetUser
}

var _ ent.Mutation = (*TweetUserMutation)(nil)

// tweetuserOption allows management of the mutation configuration using functional options.
type tweetuserOption func(*TweetUserMutation)

// newTweetUserMutation creates new mutation for the TweetUser entity.
func newTweetUserMutation(c config, op Op, opts ...tweetuserOption) *TweetUserMutation {
	m := &TweetUserMutation{
		config:        c,
		op:            op,
		typ:           TypeTweetUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTweetUserID sets the ID field of the mutation.
func withTweetUserID(id string) tweetuserOption {
	return func(m *TweetUserMutation) {
		var (
			err   error
			once  sync.Once
			value *TweetUser
		)
		m.oldValue = func(ctx context.Context) (*TweetUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TweetUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTweetUser sets the old TweetUser of the mutation.
func withTweetUser(node *TweetUser) tweetuserOption {
	return func(m *TweetUserMutation) {
		m.oldValue = func(context.Context) (*TweetUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TweetUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TweetUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TweetUser entities.
func (m *TweetUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TweetUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TweetUserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TweetUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *TweetUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *TweetUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the TweetUser entity.
// If the TweetUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *TweetUserMutation) ResetUsername() {
	m.username = nil
}

// Where appends a list predicates to the TweetUserMutation builder.
func (m *TweetUserMutation) Where(ps ...predicate.TweetUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TweetUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TweetUser).
func (m *TweetUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TweetUserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.username != nil {
		fields = append(fields, tweetuser.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TweetUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tweetuser.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TweetUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tweetuser.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown TweetUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tweetuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown TweetUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TweetUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TweetUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TweetUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TweetUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TweetUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TweetUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TweetUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TweetUserMutation) ResetField(name string) error {
	switch name {
	case tweetuser.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown TweetUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TweetUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TweetUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TweetUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TweetUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TweetUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TweetUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TweetUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TweetUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TweetUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TweetUser edge %s", name)
}
