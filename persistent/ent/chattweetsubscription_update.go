// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chattweetsubscription"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/predicate"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"
)

// ChatTweetSubscriptionUpdate is the builder for updating ChatTweetSubscription entities.
type ChatTweetSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *ChatTweetSubscriptionMutation
}

// Where appends a list predicates to the ChatTweetSubscriptionUpdate builder.
func (ctsu *ChatTweetSubscriptionUpdate) Where(ps ...predicate.ChatTweetSubscription) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.Where(ps...)
	return ctsu
}

// SetChatID sets the "chat_id" field.
func (ctsu *ChatTweetSubscriptionUpdate) SetChatID(i int64) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.SetChatID(i)
	return ctsu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (ctsu *ChatTweetSubscriptionUpdate) SetNillableChatID(i *int64) *ChatTweetSubscriptionUpdate {
	if i != nil {
		ctsu.SetChatID(*i)
	}
	return ctsu
}

// ClearChatID clears the value of the "chat_id" field.
func (ctsu *ChatTweetSubscriptionUpdate) ClearChatID() *ChatTweetSubscriptionUpdate {
	ctsu.mutation.ClearChatID()
	return ctsu
}

// SetTweeterID sets the "tweeter_id" field.
func (ctsu *ChatTweetSubscriptionUpdate) SetTweeterID(s string) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.SetTweeterID(s)
	return ctsu
}

// SetNillableTweeterID sets the "tweeter_id" field if the given value is not nil.
func (ctsu *ChatTweetSubscriptionUpdate) SetNillableTweeterID(s *string) *ChatTweetSubscriptionUpdate {
	if s != nil {
		ctsu.SetTweeterID(*s)
	}
	return ctsu
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (ctsu *ChatTweetSubscriptionUpdate) ClearTweeterID() *ChatTweetSubscriptionUpdate {
	ctsu.mutation.ClearTweeterID()
	return ctsu
}

// SetLastTweet sets the "last_tweet" field.
func (ctsu *ChatTweetSubscriptionUpdate) SetLastTweet(s string) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.SetLastTweet(s)
	return ctsu
}

// SetSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID.
func (ctsu *ChatTweetSubscriptionUpdate) SetSubscribedTweeterID(id string) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.SetSubscribedTweeterID(id)
	return ctsu
}

// SetNillableSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID if the given value is not nil.
func (ctsu *ChatTweetSubscriptionUpdate) SetNillableSubscribedTweeterID(id *string) *ChatTweetSubscriptionUpdate {
	if id != nil {
		ctsu = ctsu.SetSubscribedTweeterID(*id)
	}
	return ctsu
}

// SetSubscribedTweeter sets the "subscribed_tweeter" edge to the TweetUser entity.
func (ctsu *ChatTweetSubscriptionUpdate) SetSubscribedTweeter(t *TweetUser) *ChatTweetSubscriptionUpdate {
	return ctsu.SetSubscribedTweeterID(t.ID)
}

// SetSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID.
func (ctsu *ChatTweetSubscriptionUpdate) SetSubscribedChatID(id int64) *ChatTweetSubscriptionUpdate {
	ctsu.mutation.SetSubscribedChatID(id)
	return ctsu
}

// SetNillableSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID if the given value is not nil.
func (ctsu *ChatTweetSubscriptionUpdate) SetNillableSubscribedChatID(id *int64) *ChatTweetSubscriptionUpdate {
	if id != nil {
		ctsu = ctsu.SetSubscribedChatID(*id)
	}
	return ctsu
}

// SetSubscribedChat sets the "subscribed_chat" edge to the Chat entity.
func (ctsu *ChatTweetSubscriptionUpdate) SetSubscribedChat(c *Chat) *ChatTweetSubscriptionUpdate {
	return ctsu.SetSubscribedChatID(c.ID)
}

// Mutation returns the ChatTweetSubscriptionMutation object of the builder.
func (ctsu *ChatTweetSubscriptionUpdate) Mutation() *ChatTweetSubscriptionMutation {
	return ctsu.mutation
}

// ClearSubscribedTweeter clears the "subscribed_tweeter" edge to the TweetUser entity.
func (ctsu *ChatTweetSubscriptionUpdate) ClearSubscribedTweeter() *ChatTweetSubscriptionUpdate {
	ctsu.mutation.ClearSubscribedTweeter()
	return ctsu
}

// ClearSubscribedChat clears the "subscribed_chat" edge to the Chat entity.
func (ctsu *ChatTweetSubscriptionUpdate) ClearSubscribedChat() *ChatTweetSubscriptionUpdate {
	ctsu.mutation.ClearSubscribedChat()
	return ctsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctsu *ChatTweetSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ctsu.hooks) == 0 {
		affected, err = ctsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatTweetSubscriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctsu.mutation = mutation
			affected, err = ctsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctsu.hooks) - 1; i >= 0; i-- {
			if ctsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctsu *ChatTweetSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ctsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctsu *ChatTweetSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := ctsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctsu *ChatTweetSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := ctsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctsu *ChatTweetSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chattweetsubscription.Table,
			Columns: chattweetsubscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chattweetsubscription.FieldID,
			},
		},
	}
	if ps := ctsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctsu.mutation.LastTweet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chattweetsubscription.FieldLastTweet,
		})
	}
	if ctsu.mutation.SubscribedTweeterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedTweeterTable,
			Columns: []string{chattweetsubscription.SubscribedTweeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tweetuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctsu.mutation.SubscribedTweeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedTweeterTable,
			Columns: []string{chattweetsubscription.SubscribedTweeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tweetuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctsu.mutation.SubscribedChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedChatTable,
			Columns: []string{chattweetsubscription.SubscribedChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctsu.mutation.SubscribedChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedChatTable,
			Columns: []string{chattweetsubscription.SubscribedChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chattweetsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ChatTweetSubscriptionUpdateOne is the builder for updating a single ChatTweetSubscription entity.
type ChatTweetSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatTweetSubscriptionMutation
}

// SetChatID sets the "chat_id" field.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetChatID(i int64) *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.SetChatID(i)
	return ctsuo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetNillableChatID(i *int64) *ChatTweetSubscriptionUpdateOne {
	if i != nil {
		ctsuo.SetChatID(*i)
	}
	return ctsuo
}

// ClearChatID clears the value of the "chat_id" field.
func (ctsuo *ChatTweetSubscriptionUpdateOne) ClearChatID() *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.ClearChatID()
	return ctsuo
}

// SetTweeterID sets the "tweeter_id" field.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetTweeterID(s string) *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.SetTweeterID(s)
	return ctsuo
}

// SetNillableTweeterID sets the "tweeter_id" field if the given value is not nil.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetNillableTweeterID(s *string) *ChatTweetSubscriptionUpdateOne {
	if s != nil {
		ctsuo.SetTweeterID(*s)
	}
	return ctsuo
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (ctsuo *ChatTweetSubscriptionUpdateOne) ClearTweeterID() *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.ClearTweeterID()
	return ctsuo
}

// SetLastTweet sets the "last_tweet" field.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetLastTweet(s string) *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.SetLastTweet(s)
	return ctsuo
}

// SetSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetSubscribedTweeterID(id string) *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.SetSubscribedTweeterID(id)
	return ctsuo
}

// SetNillableSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID if the given value is not nil.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetNillableSubscribedTweeterID(id *string) *ChatTweetSubscriptionUpdateOne {
	if id != nil {
		ctsuo = ctsuo.SetSubscribedTweeterID(*id)
	}
	return ctsuo
}

// SetSubscribedTweeter sets the "subscribed_tweeter" edge to the TweetUser entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetSubscribedTweeter(t *TweetUser) *ChatTweetSubscriptionUpdateOne {
	return ctsuo.SetSubscribedTweeterID(t.ID)
}

// SetSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetSubscribedChatID(id int64) *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.SetSubscribedChatID(id)
	return ctsuo
}

// SetNillableSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID if the given value is not nil.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetNillableSubscribedChatID(id *int64) *ChatTweetSubscriptionUpdateOne {
	if id != nil {
		ctsuo = ctsuo.SetSubscribedChatID(*id)
	}
	return ctsuo
}

// SetSubscribedChat sets the "subscribed_chat" edge to the Chat entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SetSubscribedChat(c *Chat) *ChatTweetSubscriptionUpdateOne {
	return ctsuo.SetSubscribedChatID(c.ID)
}

// Mutation returns the ChatTweetSubscriptionMutation object of the builder.
func (ctsuo *ChatTweetSubscriptionUpdateOne) Mutation() *ChatTweetSubscriptionMutation {
	return ctsuo.mutation
}

// ClearSubscribedTweeter clears the "subscribed_tweeter" edge to the TweetUser entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) ClearSubscribedTweeter() *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.ClearSubscribedTweeter()
	return ctsuo
}

// ClearSubscribedChat clears the "subscribed_chat" edge to the Chat entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) ClearSubscribedChat() *ChatTweetSubscriptionUpdateOne {
	ctsuo.mutation.ClearSubscribedChat()
	return ctsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctsuo *ChatTweetSubscriptionUpdateOne) Select(field string, fields ...string) *ChatTweetSubscriptionUpdateOne {
	ctsuo.fields = append([]string{field}, fields...)
	return ctsuo
}

// Save executes the query and returns the updated ChatTweetSubscription entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) Save(ctx context.Context) (*ChatTweetSubscription, error) {
	var (
		err  error
		node *ChatTweetSubscription
	)
	if len(ctsuo.hooks) == 0 {
		node, err = ctsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatTweetSubscriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctsuo.mutation = mutation
			node, err = ctsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctsuo.hooks) - 1; i >= 0; i-- {
			if ctsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctsuo *ChatTweetSubscriptionUpdateOne) SaveX(ctx context.Context) *ChatTweetSubscription {
	node, err := ctsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctsuo *ChatTweetSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ctsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctsuo *ChatTweetSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := ctsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctsuo *ChatTweetSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *ChatTweetSubscription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chattweetsubscription.Table,
			Columns: chattweetsubscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chattweetsubscription.FieldID,
			},
		},
	}
	id, ok := ctsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatTweetSubscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chattweetsubscription.FieldID)
		for _, f := range fields {
			if !chattweetsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chattweetsubscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctsuo.mutation.LastTweet(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chattweetsubscription.FieldLastTweet,
		})
	}
	if ctsuo.mutation.SubscribedTweeterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedTweeterTable,
			Columns: []string{chattweetsubscription.SubscribedTweeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tweetuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctsuo.mutation.SubscribedTweeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedTweeterTable,
			Columns: []string{chattweetsubscription.SubscribedTweeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tweetuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctsuo.mutation.SubscribedChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedChatTable,
			Columns: []string{chattweetsubscription.SubscribedChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctsuo.mutation.SubscribedChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedChatTable,
			Columns: []string{chattweetsubscription.SubscribedChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatTweetSubscription{config: ctsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chattweetsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
