// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/migrate"

	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chattweetsubscription"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/message"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/sender"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chat is the client for interacting with the Chat builders.
	Chat *ChatClient
	// ChatTweetSubscription is the client for interacting with the ChatTweetSubscription builders.
	ChatTweetSubscription *ChatTweetSubscriptionClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Sender is the client for interacting with the Sender builders.
	Sender *SenderClient
	// TweetUser is the client for interacting with the TweetUser builders.
	TweetUser *TweetUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chat = NewChatClient(c.config)
	c.ChatTweetSubscription = NewChatTweetSubscriptionClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Sender = NewSenderClient(c.config)
	c.TweetUser = NewTweetUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Chat:                  NewChatClient(cfg),
		ChatTweetSubscription: NewChatTweetSubscriptionClient(cfg),
		Message:               NewMessageClient(cfg),
		Sender:                NewSenderClient(cfg),
		TweetUser:             NewTweetUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Chat:                  NewChatClient(cfg),
		ChatTweetSubscription: NewChatTweetSubscriptionClient(cfg),
		Message:               NewMessageClient(cfg),
		Sender:                NewSenderClient(cfg),
		TweetUser:             NewTweetUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chat.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chat.Use(hooks...)
	c.ChatTweetSubscription.Use(hooks...)
	c.Message.Use(hooks...)
	c.Sender.Use(hooks...)
	c.TweetUser.Use(hooks...)
}

// ChatClient is a client for the Chat schema.
type ChatClient struct {
	config
}

// NewChatClient returns a client for the Chat from the given config.
func NewChatClient(c config) *ChatClient {
	return &ChatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chat.Hooks(f(g(h())))`.
func (c *ChatClient) Use(hooks ...Hook) {
	c.hooks.Chat = append(c.hooks.Chat, hooks...)
}

// Create returns a create builder for Chat.
func (c *ChatClient) Create() *ChatCreate {
	mutation := newChatMutation(c.config, OpCreate)
	return &ChatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chat entities.
func (c *ChatClient) CreateBulk(builders ...*ChatCreate) *ChatCreateBulk {
	return &ChatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chat.
func (c *ChatClient) Update() *ChatUpdate {
	mutation := newChatMutation(c.config, OpUpdate)
	return &ChatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatClient) UpdateOne(ch *Chat) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChat(ch))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatClient) UpdateOneID(id int64) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChatID(id))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chat.
func (c *ChatClient) Delete() *ChatDelete {
	mutation := newChatMutation(c.config, OpDelete)
	return &ChatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChatClient) DeleteOne(ch *Chat) *ChatDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChatClient) DeleteOneID(id int64) *ChatDeleteOne {
	builder := c.Delete().Where(chat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatDeleteOne{builder}
}

// Query returns a query builder for Chat.
func (c *ChatClient) Query() *ChatQuery {
	return &ChatQuery{
		config: c.config,
	}
}

// Get returns a Chat entity by its id.
func (c *ChatClient) Get(ctx context.Context, id int64) (*Chat, error) {
	return c.Query().Where(chat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatClient) GetX(ctx context.Context, id int64) *Chat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatClient) Hooks() []Hook {
	return c.hooks.Chat
}

// ChatTweetSubscriptionClient is a client for the ChatTweetSubscription schema.
type ChatTweetSubscriptionClient struct {
	config
}

// NewChatTweetSubscriptionClient returns a client for the ChatTweetSubscription from the given config.
func NewChatTweetSubscriptionClient(c config) *ChatTweetSubscriptionClient {
	return &ChatTweetSubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chattweetsubscription.Hooks(f(g(h())))`.
func (c *ChatTweetSubscriptionClient) Use(hooks ...Hook) {
	c.hooks.ChatTweetSubscription = append(c.hooks.ChatTweetSubscription, hooks...)
}

// Create returns a create builder for ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) Create() *ChatTweetSubscriptionCreate {
	mutation := newChatTweetSubscriptionMutation(c.config, OpCreate)
	return &ChatTweetSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatTweetSubscription entities.
func (c *ChatTweetSubscriptionClient) CreateBulk(builders ...*ChatTweetSubscriptionCreate) *ChatTweetSubscriptionCreateBulk {
	return &ChatTweetSubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) Update() *ChatTweetSubscriptionUpdate {
	mutation := newChatTweetSubscriptionMutation(c.config, OpUpdate)
	return &ChatTweetSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatTweetSubscriptionClient) UpdateOne(cts *ChatTweetSubscription) *ChatTweetSubscriptionUpdateOne {
	mutation := newChatTweetSubscriptionMutation(c.config, OpUpdateOne, withChatTweetSubscription(cts))
	return &ChatTweetSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatTweetSubscriptionClient) UpdateOneID(id int) *ChatTweetSubscriptionUpdateOne {
	mutation := newChatTweetSubscriptionMutation(c.config, OpUpdateOne, withChatTweetSubscriptionID(id))
	return &ChatTweetSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) Delete() *ChatTweetSubscriptionDelete {
	mutation := newChatTweetSubscriptionMutation(c.config, OpDelete)
	return &ChatTweetSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChatTweetSubscriptionClient) DeleteOne(cts *ChatTweetSubscription) *ChatTweetSubscriptionDeleteOne {
	return c.DeleteOneID(cts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChatTweetSubscriptionClient) DeleteOneID(id int) *ChatTweetSubscriptionDeleteOne {
	builder := c.Delete().Where(chattweetsubscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatTweetSubscriptionDeleteOne{builder}
}

// Query returns a query builder for ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) Query() *ChatTweetSubscriptionQuery {
	return &ChatTweetSubscriptionQuery{
		config: c.config,
	}
}

// Get returns a ChatTweetSubscription entity by its id.
func (c *ChatTweetSubscriptionClient) Get(ctx context.Context, id int) (*ChatTweetSubscription, error) {
	return c.Query().Where(chattweetsubscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatTweetSubscriptionClient) GetX(ctx context.Context, id int) *ChatTweetSubscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribedTweeter queries the subscribed_tweeter edge of a ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) QuerySubscribedTweeter(cts *ChatTweetSubscription) *TweetUserQuery {
	query := &TweetUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chattweetsubscription.Table, chattweetsubscription.FieldID, id),
			sqlgraph.To(tweetuser.Table, tweetuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chattweetsubscription.SubscribedTweeterTable, chattweetsubscription.SubscribedTweeterColumn),
		)
		fromV = sqlgraph.Neighbors(cts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedChat queries the subscribed_chat edge of a ChatTweetSubscription.
func (c *ChatTweetSubscriptionClient) QuerySubscribedChat(cts *ChatTweetSubscription) *ChatQuery {
	query := &ChatQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chattweetsubscription.Table, chattweetsubscription.FieldID, id),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chattweetsubscription.SubscribedChatTable, chattweetsubscription.SubscribedChatColumn),
		)
		fromV = sqlgraph.Neighbors(cts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChatTweetSubscriptionClient) Hooks() []Hook {
	return c.hooks.ChatTweetSubscription
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a create builder for Message.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromChat queries the from_chat edge of a Message.
func (c *MessageClient) QueryFromChat(m *Message) *ChatQuery {
	query := &ChatQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.FromChatTable, message.FromChatColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromSender queries the from_sender edge of a Message.
func (c *MessageClient) QueryFromSender(m *Message) *SenderQuery {
	query := &SenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(sender.Table, sender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.FromSenderTable, message.FromSenderColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// SenderClient is a client for the Sender schema.
type SenderClient struct {
	config
}

// NewSenderClient returns a client for the Sender from the given config.
func NewSenderClient(c config) *SenderClient {
	return &SenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sender.Hooks(f(g(h())))`.
func (c *SenderClient) Use(hooks ...Hook) {
	c.hooks.Sender = append(c.hooks.Sender, hooks...)
}

// Create returns a create builder for Sender.
func (c *SenderClient) Create() *SenderCreate {
	mutation := newSenderMutation(c.config, OpCreate)
	return &SenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sender entities.
func (c *SenderClient) CreateBulk(builders ...*SenderCreate) *SenderCreateBulk {
	return &SenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sender.
func (c *SenderClient) Update() *SenderUpdate {
	mutation := newSenderMutation(c.config, OpUpdate)
	return &SenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SenderClient) UpdateOne(s *Sender) *SenderUpdateOne {
	mutation := newSenderMutation(c.config, OpUpdateOne, withSender(s))
	return &SenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SenderClient) UpdateOneID(id int64) *SenderUpdateOne {
	mutation := newSenderMutation(c.config, OpUpdateOne, withSenderID(id))
	return &SenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sender.
func (c *SenderClient) Delete() *SenderDelete {
	mutation := newSenderMutation(c.config, OpDelete)
	return &SenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SenderClient) DeleteOne(s *Sender) *SenderDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SenderClient) DeleteOneID(id int64) *SenderDeleteOne {
	builder := c.Delete().Where(sender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SenderDeleteOne{builder}
}

// Query returns a query builder for Sender.
func (c *SenderClient) Query() *SenderQuery {
	return &SenderQuery{
		config: c.config,
	}
}

// Get returns a Sender entity by its id.
func (c *SenderClient) Get(ctx context.Context, id int64) (*Sender, error) {
	return c.Query().Where(sender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SenderClient) GetX(ctx context.Context, id int64) *Sender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SenderClient) Hooks() []Hook {
	return c.hooks.Sender
}

// TweetUserClient is a client for the TweetUser schema.
type TweetUserClient struct {
	config
}

// NewTweetUserClient returns a client for the TweetUser from the given config.
func NewTweetUserClient(c config) *TweetUserClient {
	return &TweetUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tweetuser.Hooks(f(g(h())))`.
func (c *TweetUserClient) Use(hooks ...Hook) {
	c.hooks.TweetUser = append(c.hooks.TweetUser, hooks...)
}

// Create returns a create builder for TweetUser.
func (c *TweetUserClient) Create() *TweetUserCreate {
	mutation := newTweetUserMutation(c.config, OpCreate)
	return &TweetUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TweetUser entities.
func (c *TweetUserClient) CreateBulk(builders ...*TweetUserCreate) *TweetUserCreateBulk {
	return &TweetUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TweetUser.
func (c *TweetUserClient) Update() *TweetUserUpdate {
	mutation := newTweetUserMutation(c.config, OpUpdate)
	return &TweetUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TweetUserClient) UpdateOne(tu *TweetUser) *TweetUserUpdateOne {
	mutation := newTweetUserMutation(c.config, OpUpdateOne, withTweetUser(tu))
	return &TweetUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TweetUserClient) UpdateOneID(id string) *TweetUserUpdateOne {
	mutation := newTweetUserMutation(c.config, OpUpdateOne, withTweetUserID(id))
	return &TweetUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TweetUser.
func (c *TweetUserClient) Delete() *TweetUserDelete {
	mutation := newTweetUserMutation(c.config, OpDelete)
	return &TweetUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TweetUserClient) DeleteOne(tu *TweetUser) *TweetUserDeleteOne {
	return c.DeleteOneID(tu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TweetUserClient) DeleteOneID(id string) *TweetUserDeleteOne {
	builder := c.Delete().Where(tweetuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TweetUserDeleteOne{builder}
}

// Query returns a query builder for TweetUser.
func (c *TweetUserClient) Query() *TweetUserQuery {
	return &TweetUserQuery{
		config: c.config,
	}
}

// Get returns a TweetUser entity by its id.
func (c *TweetUserClient) Get(ctx context.Context, id string) (*TweetUser, error) {
	return c.Query().Where(tweetuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TweetUserClient) GetX(ctx context.Context, id string) *TweetUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TweetUserClient) Hooks() []Hook {
	return c.hooks.TweetUser
}
