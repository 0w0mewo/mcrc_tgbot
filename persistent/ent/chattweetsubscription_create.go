// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chattweetsubscription"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"
)

// ChatTweetSubscriptionCreate is the builder for creating a ChatTweetSubscription entity.
type ChatTweetSubscriptionCreate struct {
	config
	mutation *ChatTweetSubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetChatID sets the "chat_id" field.
func (ctsc *ChatTweetSubscriptionCreate) SetChatID(i int64) *ChatTweetSubscriptionCreate {
	ctsc.mutation.SetChatID(i)
	return ctsc
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (ctsc *ChatTweetSubscriptionCreate) SetNillableChatID(i *int64) *ChatTweetSubscriptionCreate {
	if i != nil {
		ctsc.SetChatID(*i)
	}
	return ctsc
}

// SetTweeterID sets the "tweeter_id" field.
func (ctsc *ChatTweetSubscriptionCreate) SetTweeterID(s string) *ChatTweetSubscriptionCreate {
	ctsc.mutation.SetTweeterID(s)
	return ctsc
}

// SetNillableTweeterID sets the "tweeter_id" field if the given value is not nil.
func (ctsc *ChatTweetSubscriptionCreate) SetNillableTweeterID(s *string) *ChatTweetSubscriptionCreate {
	if s != nil {
		ctsc.SetTweeterID(*s)
	}
	return ctsc
}

// SetLastTweet sets the "last_tweet" field.
func (ctsc *ChatTweetSubscriptionCreate) SetLastTweet(s string) *ChatTweetSubscriptionCreate {
	ctsc.mutation.SetLastTweet(s)
	return ctsc
}

// SetSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID.
func (ctsc *ChatTweetSubscriptionCreate) SetSubscribedTweeterID(id string) *ChatTweetSubscriptionCreate {
	ctsc.mutation.SetSubscribedTweeterID(id)
	return ctsc
}

// SetNillableSubscribedTweeterID sets the "subscribed_tweeter" edge to the TweetUser entity by ID if the given value is not nil.
func (ctsc *ChatTweetSubscriptionCreate) SetNillableSubscribedTweeterID(id *string) *ChatTweetSubscriptionCreate {
	if id != nil {
		ctsc = ctsc.SetSubscribedTweeterID(*id)
	}
	return ctsc
}

// SetSubscribedTweeter sets the "subscribed_tweeter" edge to the TweetUser entity.
func (ctsc *ChatTweetSubscriptionCreate) SetSubscribedTweeter(t *TweetUser) *ChatTweetSubscriptionCreate {
	return ctsc.SetSubscribedTweeterID(t.ID)
}

// SetSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID.
func (ctsc *ChatTweetSubscriptionCreate) SetSubscribedChatID(id int64) *ChatTweetSubscriptionCreate {
	ctsc.mutation.SetSubscribedChatID(id)
	return ctsc
}

// SetNillableSubscribedChatID sets the "subscribed_chat" edge to the Chat entity by ID if the given value is not nil.
func (ctsc *ChatTweetSubscriptionCreate) SetNillableSubscribedChatID(id *int64) *ChatTweetSubscriptionCreate {
	if id != nil {
		ctsc = ctsc.SetSubscribedChatID(*id)
	}
	return ctsc
}

// SetSubscribedChat sets the "subscribed_chat" edge to the Chat entity.
func (ctsc *ChatTweetSubscriptionCreate) SetSubscribedChat(c *Chat) *ChatTweetSubscriptionCreate {
	return ctsc.SetSubscribedChatID(c.ID)
}

// Mutation returns the ChatTweetSubscriptionMutation object of the builder.
func (ctsc *ChatTweetSubscriptionCreate) Mutation() *ChatTweetSubscriptionMutation {
	return ctsc.mutation
}

// Save creates the ChatTweetSubscription in the database.
func (ctsc *ChatTweetSubscriptionCreate) Save(ctx context.Context) (*ChatTweetSubscription, error) {
	var (
		err  error
		node *ChatTweetSubscription
	)
	if len(ctsc.hooks) == 0 {
		if err = ctsc.check(); err != nil {
			return nil, err
		}
		node, err = ctsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChatTweetSubscriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctsc.check(); err != nil {
				return nil, err
			}
			ctsc.mutation = mutation
			if node, err = ctsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctsc.hooks) - 1; i >= 0; i-- {
			if ctsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctsc *ChatTweetSubscriptionCreate) SaveX(ctx context.Context) *ChatTweetSubscription {
	v, err := ctsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctsc *ChatTweetSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := ctsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctsc *ChatTweetSubscriptionCreate) ExecX(ctx context.Context) {
	if err := ctsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctsc *ChatTweetSubscriptionCreate) check() error {
	if _, ok := ctsc.mutation.LastTweet(); !ok {
		return &ValidationError{Name: "last_tweet", err: errors.New(`ent: missing required field "ChatTweetSubscription.last_tweet"`)}
	}
	return nil
}

func (ctsc *ChatTweetSubscriptionCreate) sqlSave(ctx context.Context) (*ChatTweetSubscription, error) {
	_node, _spec := ctsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ctsc *ChatTweetSubscriptionCreate) createSpec() (*ChatTweetSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatTweetSubscription{config: ctsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chattweetsubscription.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chattweetsubscription.FieldID,
			},
		}
	)
	_spec.OnConflict = ctsc.conflict
	if value, ok := ctsc.mutation.LastTweet(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chattweetsubscription.FieldLastTweet,
		})
		_node.LastTweet = value
	}
	if nodes := ctsc.mutation.SubscribedTweeterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedTweeterTable,
			Columns: []string{chattweetsubscription.SubscribedTweeterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tweetuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TweeterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctsc.mutation.SubscribedChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chattweetsubscription.SubscribedChatTable,
			Columns: []string{chattweetsubscription.SubscribedChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChatID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatTweetSubscription.Create().
//		SetChatID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatTweetSubscriptionUpsert) {
//			SetChatID(v+v).
//		}).
//		Exec(ctx)
//
func (ctsc *ChatTweetSubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *ChatTweetSubscriptionUpsertOne {
	ctsc.conflict = opts
	return &ChatTweetSubscriptionUpsertOne{
		create: ctsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatTweetSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ctsc *ChatTweetSubscriptionCreate) OnConflictColumns(columns ...string) *ChatTweetSubscriptionUpsertOne {
	ctsc.conflict = append(ctsc.conflict, sql.ConflictColumns(columns...))
	return &ChatTweetSubscriptionUpsertOne{
		create: ctsc,
	}
}

type (
	// ChatTweetSubscriptionUpsertOne is the builder for "upsert"-ing
	//  one ChatTweetSubscription node.
	ChatTweetSubscriptionUpsertOne struct {
		create *ChatTweetSubscriptionCreate
	}

	// ChatTweetSubscriptionUpsert is the "OnConflict" setter.
	ChatTweetSubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetChatID sets the "chat_id" field.
func (u *ChatTweetSubscriptionUpsert) SetChatID(v int64) *ChatTweetSubscriptionUpsert {
	u.Set(chattweetsubscription.FieldChatID, v)
	return u
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsert) UpdateChatID() *ChatTweetSubscriptionUpsert {
	u.SetExcluded(chattweetsubscription.FieldChatID)
	return u
}

// ClearChatID clears the value of the "chat_id" field.
func (u *ChatTweetSubscriptionUpsert) ClearChatID() *ChatTweetSubscriptionUpsert {
	u.SetNull(chattweetsubscription.FieldChatID)
	return u
}

// SetTweeterID sets the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsert) SetTweeterID(v string) *ChatTweetSubscriptionUpsert {
	u.Set(chattweetsubscription.FieldTweeterID, v)
	return u
}

// UpdateTweeterID sets the "tweeter_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsert) UpdateTweeterID() *ChatTweetSubscriptionUpsert {
	u.SetExcluded(chattweetsubscription.FieldTweeterID)
	return u
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsert) ClearTweeterID() *ChatTweetSubscriptionUpsert {
	u.SetNull(chattweetsubscription.FieldTweeterID)
	return u
}

// SetLastTweet sets the "last_tweet" field.
func (u *ChatTweetSubscriptionUpsert) SetLastTweet(v string) *ChatTweetSubscriptionUpsert {
	u.Set(chattweetsubscription.FieldLastTweet, v)
	return u
}

// UpdateLastTweet sets the "last_tweet" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsert) UpdateLastTweet() *ChatTweetSubscriptionUpsert {
	u.SetExcluded(chattweetsubscription.FieldLastTweet)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ChatTweetSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ChatTweetSubscriptionUpsertOne) UpdateNewValues() *ChatTweetSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ChatTweetSubscription.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ChatTweetSubscriptionUpsertOne) Ignore() *ChatTweetSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatTweetSubscriptionUpsertOne) DoNothing() *ChatTweetSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatTweetSubscriptionCreate.OnConflict
// documentation for more info.
func (u *ChatTweetSubscriptionUpsertOne) Update(set func(*ChatTweetSubscriptionUpsert)) *ChatTweetSubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatTweetSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetChatID sets the "chat_id" field.
func (u *ChatTweetSubscriptionUpsertOne) SetChatID(v int64) *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertOne) UpdateChatID() *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateChatID()
	})
}

// ClearChatID clears the value of the "chat_id" field.
func (u *ChatTweetSubscriptionUpsertOne) ClearChatID() *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.ClearChatID()
	})
}

// SetTweeterID sets the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsertOne) SetTweeterID(v string) *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetTweeterID(v)
	})
}

// UpdateTweeterID sets the "tweeter_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertOne) UpdateTweeterID() *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateTweeterID()
	})
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsertOne) ClearTweeterID() *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.ClearTweeterID()
	})
}

// SetLastTweet sets the "last_tweet" field.
func (u *ChatTweetSubscriptionUpsertOne) SetLastTweet(v string) *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetLastTweet(v)
	})
}

// UpdateLastTweet sets the "last_tweet" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertOne) UpdateLastTweet() *ChatTweetSubscriptionUpsertOne {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateLastTweet()
	})
}

// Exec executes the query.
func (u *ChatTweetSubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatTweetSubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatTweetSubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChatTweetSubscriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChatTweetSubscriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChatTweetSubscriptionCreateBulk is the builder for creating many ChatTweetSubscription entities in bulk.
type ChatTweetSubscriptionCreateBulk struct {
	config
	builders []*ChatTweetSubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the ChatTweetSubscription entities in the database.
func (ctscb *ChatTweetSubscriptionCreateBulk) Save(ctx context.Context) ([]*ChatTweetSubscription, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctscb.builders))
	nodes := make([]*ChatTweetSubscription, len(ctscb.builders))
	mutators := make([]Mutator, len(ctscb.builders))
	for i := range ctscb.builders {
		func(i int, root context.Context) {
			builder := ctscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatTweetSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctscb *ChatTweetSubscriptionCreateBulk) SaveX(ctx context.Context) []*ChatTweetSubscription {
	v, err := ctscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctscb *ChatTweetSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ctscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctscb *ChatTweetSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ctscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatTweetSubscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatTweetSubscriptionUpsert) {
//			SetChatID(v+v).
//		}).
//		Exec(ctx)
//
func (ctscb *ChatTweetSubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChatTweetSubscriptionUpsertBulk {
	ctscb.conflict = opts
	return &ChatTweetSubscriptionUpsertBulk{
		create: ctscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatTweetSubscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ctscb *ChatTweetSubscriptionCreateBulk) OnConflictColumns(columns ...string) *ChatTweetSubscriptionUpsertBulk {
	ctscb.conflict = append(ctscb.conflict, sql.ConflictColumns(columns...))
	return &ChatTweetSubscriptionUpsertBulk{
		create: ctscb,
	}
}

// ChatTweetSubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of ChatTweetSubscription nodes.
type ChatTweetSubscriptionUpsertBulk struct {
	create *ChatTweetSubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChatTweetSubscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ChatTweetSubscriptionUpsertBulk) UpdateNewValues() *ChatTweetSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChatTweetSubscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ChatTweetSubscriptionUpsertBulk) Ignore() *ChatTweetSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatTweetSubscriptionUpsertBulk) DoNothing() *ChatTweetSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatTweetSubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *ChatTweetSubscriptionUpsertBulk) Update(set func(*ChatTweetSubscriptionUpsert)) *ChatTweetSubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatTweetSubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetChatID sets the "chat_id" field.
func (u *ChatTweetSubscriptionUpsertBulk) SetChatID(v int64) *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertBulk) UpdateChatID() *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateChatID()
	})
}

// ClearChatID clears the value of the "chat_id" field.
func (u *ChatTweetSubscriptionUpsertBulk) ClearChatID() *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.ClearChatID()
	})
}

// SetTweeterID sets the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsertBulk) SetTweeterID(v string) *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetTweeterID(v)
	})
}

// UpdateTweeterID sets the "tweeter_id" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertBulk) UpdateTweeterID() *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateTweeterID()
	})
}

// ClearTweeterID clears the value of the "tweeter_id" field.
func (u *ChatTweetSubscriptionUpsertBulk) ClearTweeterID() *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.ClearTweeterID()
	})
}

// SetLastTweet sets the "last_tweet" field.
func (u *ChatTweetSubscriptionUpsertBulk) SetLastTweet(v string) *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.SetLastTweet(v)
	})
}

// UpdateLastTweet sets the "last_tweet" field to the value that was provided on create.
func (u *ChatTweetSubscriptionUpsertBulk) UpdateLastTweet() *ChatTweetSubscriptionUpsertBulk {
	return u.Update(func(s *ChatTweetSubscriptionUpsert) {
		s.UpdateLastTweet()
	})
}

// Exec executes the query.
func (u *ChatTweetSubscriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChatTweetSubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatTweetSubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatTweetSubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
