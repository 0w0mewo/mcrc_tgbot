// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chat"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/chattweetsubscription"
	"github.com/0w0mewo/mcrc_tgbot/persistent/ent/tweetuser"
)

// ChatTweetSubscription is the model entity for the ChatTweetSubscription schema.
type ChatTweetSubscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// TweeterID holds the value of the "tweeter_id" field.
	TweeterID string `json:"tweeter_id,omitempty"`
	// LastTweet holds the value of the "last_tweet" field.
	LastTweet string `json:"last_tweet,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatTweetSubscriptionQuery when eager-loading is set.
	Edges ChatTweetSubscriptionEdges `json:"edges"`
}

// ChatTweetSubscriptionEdges holds the relations/edges for other nodes in the graph.
type ChatTweetSubscriptionEdges struct {
	// SubscribedTweeter holds the value of the subscribed_tweeter edge.
	SubscribedTweeter *TweetUser `json:"subscribed_tweeter,omitempty"`
	// SubscribedChat holds the value of the subscribed_chat edge.
	SubscribedChat *Chat `json:"subscribed_chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubscribedTweeterOrErr returns the SubscribedTweeter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatTweetSubscriptionEdges) SubscribedTweeterOrErr() (*TweetUser, error) {
	if e.loadedTypes[0] {
		if e.SubscribedTweeter == nil {
			// The edge subscribed_tweeter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tweetuser.Label}
		}
		return e.SubscribedTweeter, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_tweeter"}
}

// SubscribedChatOrErr returns the SubscribedChat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatTweetSubscriptionEdges) SubscribedChatOrErr() (*Chat, error) {
	if e.loadedTypes[1] {
		if e.SubscribedChat == nil {
			// The edge subscribed_chat was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.SubscribedChat, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatTweetSubscription) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chattweetsubscription.FieldID, chattweetsubscription.FieldChatID:
			values[i] = new(sql.NullInt64)
		case chattweetsubscription.FieldTweeterID, chattweetsubscription.FieldLastTweet:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatTweetSubscription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatTweetSubscription fields.
func (cts *ChatTweetSubscription) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chattweetsubscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cts.ID = int(value.Int64)
		case chattweetsubscription.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				cts.ChatID = value.Int64
			}
		case chattweetsubscription.FieldTweeterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tweeter_id", values[i])
			} else if value.Valid {
				cts.TweeterID = value.String
			}
		case chattweetsubscription.FieldLastTweet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_tweet", values[i])
			} else if value.Valid {
				cts.LastTweet = value.String
			}
		}
	}
	return nil
}

// QuerySubscribedTweeter queries the "subscribed_tweeter" edge of the ChatTweetSubscription entity.
func (cts *ChatTweetSubscription) QuerySubscribedTweeter() *TweetUserQuery {
	return (&ChatTweetSubscriptionClient{config: cts.config}).QuerySubscribedTweeter(cts)
}

// QuerySubscribedChat queries the "subscribed_chat" edge of the ChatTweetSubscription entity.
func (cts *ChatTweetSubscription) QuerySubscribedChat() *ChatQuery {
	return (&ChatTweetSubscriptionClient{config: cts.config}).QuerySubscribedChat(cts)
}

// Update returns a builder for updating this ChatTweetSubscription.
// Note that you need to call ChatTweetSubscription.Unwrap() before calling this method if this ChatTweetSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (cts *ChatTweetSubscription) Update() *ChatTweetSubscriptionUpdateOne {
	return (&ChatTweetSubscriptionClient{config: cts.config}).UpdateOne(cts)
}

// Unwrap unwraps the ChatTweetSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cts *ChatTweetSubscription) Unwrap() *ChatTweetSubscription {
	tx, ok := cts.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatTweetSubscription is not a transactional entity")
	}
	cts.config.driver = tx.drv
	return cts
}

// String implements the fmt.Stringer.
func (cts *ChatTweetSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("ChatTweetSubscription(")
	builder.WriteString(fmt.Sprintf("id=%v", cts.ID))
	builder.WriteString(", chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cts.ChatID))
	builder.WriteString(", tweeter_id=")
	builder.WriteString(cts.TweeterID)
	builder.WriteString(", last_tweet=")
	builder.WriteString(cts.LastTweet)
	builder.WriteByte(')')
	return builder.String()
}

// ChatTweetSubscriptions is a parsable slice of ChatTweetSubscription.
type ChatTweetSubscriptions []*ChatTweetSubscription

func (cts ChatTweetSubscriptions) config(cfg config) {
	for _i := range cts {
		cts[_i].config = cfg
	}
}
